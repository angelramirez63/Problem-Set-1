theme_classic() +
theme(plot.title = element_text(size = 18))
plot
}
variables <- c("ingtot", "ingtotes", "ingtotob", "y_salary_m", "y_salary_m_hu")
rm(list = ls())
cat("\014")
###Cargar paquetes:
if(!require(pacman)) install.packages("pacman") ; require(pacman)
p_load(rio, # import/export data
tidyverse, # tidy-data
skimr, # summary data
visdat, # visualizing missing data
corrplot, # Correlation Plots
stargazer, # tables/output to TEX.
here) # referenciar ubicación de archivos
###Cargar datos:
#i) here(): es una función que se usa para referenciar la ubicación de los archivos.
#para que funcionen deben abrir el problem set-1 como proyecto de R
#ii) Definir el directorio
wd <- here()
setwd(wd)
rm(wd)
#iii) Cargar los datos:
db <- readRDS("stores/datos_GEIH.rds") %>%
as_tibble()
db <- db %>%
filter(age >= 18 & ocu == 1)
db <-  db %>%  mutate(across(c(cclasnr11, cclasnr2, cclasnr3, cclasnr4,cclasnr6, cclasnr7,
cclasnr8, college, cotPension, cuentaPropia, formal, informal,
microEmpresa, sex, estrato1, maxEducLevel, oficio, p6050, p6090,
p6100, p6210, p6210s1, p6240, p6510, p6510s2, p6545, p6545s2,
p6580, p6580s2, p6585s1, p6585s1a2, p6585s2, p6585s2a2, p6585s3,
p6585s3a2, p6585s4, p6585s4a2, p6590, p6600, p6610, p6620,
p6630s1, p6630s2, p6630s3,p6630s4, p6630s6, p6920, p7040,
p7050, p7505, regSalud, relab, sizeFirm), as.factor))
variables <- c("ingtot", "ingtotes", "ingtotob", "y_salary_m", "y_salary_m_hu")
for (variable in variables) {
plot <- ggplot(db, aes_string(variable)) +
geom_histogram(color = "#000000", fill = "#0099F8") +
geom_vline(xintercept = median(get(variable), na.rm = TRUE), linetype = "dashed", color = "red") +
geom_vline(xintercept = mean(get(variable), na.rm = TRUE), linetype = "dashed", color = "blue") +
ggtitle(paste("Distribución", as.character(variable), sep = " ")) +
theme_classic() +
theme(plot.title = element_text(size = 18))
plot
}
for (variable in variables) {
plot <- ggplot(db, aes_string(variable)) +
geom_histogram(color = "#000000", fill = "#0099F8") +
geom_vline(xintercept = median(get(variable), na.rm = TRUE), linetype = "dashed", color = "red") +
geom_vline(xintercept = mean(get(variable), na.rm = TRUE), linetype = "dashed", color = "blue") +
ggtitle(paste("Distribución", variable, sep = " ")) +
theme_classic() +
theme(plot.title = element_text(size = 18))
print(plot)  # Add this line to explicitly print the plot
}
library(ggplot2)
# List of variables
variables <- c("ingtot", "ingtotes", "ingtotob", "y_salary_m", "y_salary_m_hu")
for (variable in variables) {
# Use ggplot to plot for each variable in the list
p <- ggplot(db, aes_string(x = variable)) +
geom_histogram(color = "#000000", fill = "#0099F8") +
geom_vline(aes(xintercept = median(get(variable), na.rm = TRUE)),
linetype = "dashed", color = "red") +
geom_vline(aes(xintercept = mean(get(variable), na.rm = TRUE)),
linetype = "dashed", color = "blue") +
ggtitle(paste("Distribución", variable, sep = " ")) +
theme_classic() +
theme(plot.title = element_text(size = 18))
print(p)  # Make sure the plot is shown
}
for (variable in variables) {
plot <- ggplot(db, aes_string(variable)) +
geom_histogram(color = "#000000", fill = "#0099F8") +
geom_vline(xintercept = median(db[[variable]], na.rm = TRUE), linetype = "dashed", color = "red") +
geom_vline(xintercept = mean(db[[variable]], na.rm = TRUE), linetype = "dashed", color = "blue") +
ggtitle(paste("Distribución", as.character(variable), sep = " ")) +
theme_classic() +
theme(plot.title = element_text(size = 18))
plot
}
for (variable in variables) {
plot <- ggplot(db, aes_string(variable)) +
geom_histogram(color = "#000000", fill = "#0099F8") +
geom_vline(xintercept = median(db[[variable]], na.rm = TRUE), linetype = "dashed", color = "red") +
geom_vline(xintercept = mean(db[[variable]], na.rm = TRUE), linetype = "dashed", color = "blue") +
ggtitle(paste("Distribución", as.character(variable), sep = " ")) +
theme_classic() +
theme(plot.title = element_text(size = 18))
plot
}
for (variable in variables) {
plot <- ggplot(db, aes_string(variable)) +
geom_histogram(color = "#000000", fill = "#0099F8") +
geom_vline(xintercept = median(db[[variable]], na.rm = TRUE), linetype = "dashed", color = "red") +
geom_vline(xintercept = mean(db[[variable]], na.rm = TRUE), linetype = "dashed", color = "blue") +
ggtitle(paste("Distribución", as.character(variable), sep = " ")) +
theme_classic() +
theme(plot.title = element_text(size = 18))
print(plot)
}
db[["ingtot"]]
for (variable in c(ingtot, ingtotes,ingtotob, y_salary_m, y_salary_m_hu)) {
db <- db %>%
group_by(estrato1) %>%
mutate( variable = ifelse(is.na(variable) == T, median(variable, na.rm = T), variable)) %>%
ungroup()
}
nombre <- "juan"
nombre2 <- !!nombre
rm(nombre)
skim(db$maxEducLevel)
View(db)
cat("\014")
rm(list= ls())
# install pacman
if(!require(pacman)) install.packages("pacman") ; require(pacman)
#require/install packages on this session
p_load(rio, # import/export data
tidyverse, # tidy-data
skimr, # summary data
visdat, # visualizing missing data
corrplot, # Correlation Plots
stargazer) # tables/output to TEX.
df <- import("https://github.com/ignaciomsarmiento/datasets/blob/main/GEIH_sample1.Rds?raw=true")
db <- as_tibble(df) ## from dataframe to tibble
rm(list = ls())
cat("\014")
###Cargar paquetes:
if(!require(pacman)) install.packages("pacman") ; require(pacman)
p_load(rio, # import/export data
tidyverse, # tidy-data
skimr, # summary data
visdat, # visualizing missing data
corrplot, # Correlation Plots
stargazer, # tables/output to TEX.
here) # referenciar ubicación de archivos
wd <- here()
setwd(wd)
rm(wd)
#iii) Cargar los datos:
db <- readRDS("stores/datos_GEIH.rds") %>%
as_tibble()
db <- db %>%
filter(age >= 18 & ocu == 1)
unique(db$depto)
table(db$depto)
View(db)
unique(db$dominio)
?length
lenght(db)
length(db)
?select_if
?all
db <- db %>% select_if(!all(is.na(.)) | (unique(.)>1))
db <- db %>% select_if(~ !all(is.na(.)) & length(unique(.))>1)
rm(list = ls())
cat("\014")
###Cargar paquetes:
if(!require(pacman)) install.packages("pacman") ; require(pacman)
p_load(rio, # import/export data
tidyverse, # tidy-data
skimr, # summary data
visdat, # visualizing missing data
corrplot, # Correlation Plots
stargazer, # tables/output to TEX.
here) # referenciar ubicación de archivos
wd <- here()
setwd(wd)
rm(wd)
#iii) Cargar los datos:
db <- readRDS("stores/datos_GEIH.rds") %>%
as_tibble()
###Conservar indiviudos mayores de 18 años que tienen un empleo:
#iv) la condicción para conservar la observación es:  age == edad_personas , ocu === dummy_si_la_persona esta ocupada
db <- db %>%
filter(age >= 18 & ocu == 1)
db_test <- db %>% select_if(~ !all(is.na(.)) & length(unique(.))>1)
rm(db_test)
db_test <- db %>% select_if(~ all(is.na(.)) & length(unique(.))==1)
View(db_test)
db_test <- db %>% select_if(~ all(is.na(.)) & (unique(.)==1))
db_test <- db %>% select_if(!all(is.na(.)) | (unique(.)>1))
unique(db$clase)
db%
db$clase
lenght(11)
length(11)
db_test <- db %>% select_if(!all(is.na(.)) | lenght((unique(.)>1)))
db_test <- db %>% select_if(!all(is.na(.)) | length((unique(.)>1)))
db_test <- db %>% select_if( ~ !all(is.na(.)) | length((unique(.)>1)))
db_test <- db %>% select_if(~ all(is.na(.)) & length(unique(.)==1))
rm(db_test)
#Mi code:
db_test <- db %>% select_if( ~ !all(is.na(.)) | length((unique(.)>1)))
#Natalia´s code:
db_test <- db %>% select_if(~ !all(is.na(.)) & length(unique(.))>1)
#Test codes:
db_test <- db %>% select_if(~ all(is.na(.)) & length(unique(.))==1)
db_test <- db %>% select_if(!(~ !all(is.na(.)) & length(unique(.))>1))
db_test <- db %>% select_if(~ !all(is.na(.)) | length(unique(.))>1)
db_test <- db %>% select_if(~ all(is.na(.)) | length(unique(.))==1)
View(db_test)
rm(db_test)
#Test codes:
db_test <- db %>% select_if(~ all(is.na(.)) | length(unique(.))==1)
View(db_test)
db_test2 <- db %>% select_if(~ all(is.na(.)) & length(unique(.))==1)
View(db_test2)
rm(list = ls())
wd <- here()
setwd(wd)
rm(wd)
rm(list = ls())
db <- readRDS("stores/datos_GEIH.rds") %>%
as_tibble()
db_limpia <- db %>%
filter(wap == 1 & ocu == 1)
wap
db_limpia <- db_limpia %>% select_if(~ !all(is.na(.)) & length(unique(.))>1)
db <- db %>%
filter(age >= 18 & ocu == 1)
#Test codes:
db_test <- db %>% select_if(~ all(is.na(.)) | length(unique(.))==1)
db_test2 <- db %>% select_if(~ all(is.na(.)) & length(unique(.))==1)
View(db_test)
#Test codes:
db_test <- db %>% select_if(~ !all(is.na(.)) | length(unique(.))>1)
#Test codes:
db_test <- db %>% select_if(!all(is.na(.)) | length(unique(.))>1)
#Mi code:
db_test <- db %>% select_if( ~ !all(is.na(.)) | length((unique(.)>1)))
db_test2 <- db %>% select_if(~ all(is.na(.)) & length(unique(.))==1)
db_test2 <- db %>% select_if(~ all(is.na(.)) | length(unique(.))==1)
?is.na
is.na(db$directorio)
is.na(db)
?all
View(db_test2)
###Borrar ambiente y consola:
rm(list = ls())
cat("\014")
###Cargar paquetes:
if(!require(pacman)) install.packages("pacman") ; require(pacman)
p_load(rio, # import/export data
tidyverse, # tidy-data
skimr, # summary data
visdat, # visualizing missing data
corrplot, # Correlation Plots
stargazer, # tables/output to TEX.
here) # referenciar ubicación de archivos
###Cargar datos:
#i) here(): es una función que se usa para referenciar la ubicación de los archivos.
#para que funcionen deben abrir el problem set-1 como proyecto de R
#ii) Definir el directorio
wd <- here()
setwd(wd)
rm(wd)
#iii) Cargar los datos:
db <- readRDS("stores/datos_GEIH.rds") %>%
as_tibble()
###Conservar indiviudos mayores de 18 años que tienen un empleo:
#iv) la condicción para conservar la observación es:  age == edad_personas , ocu === dummy_si_la_persona esta ocupada
db <- db %>%
filter(age >= 18 & ocu == 1)
#Variables que solo tienen missing values o que tienen el mismo valor para todas las observaciones:
Solo_NA_o_Valor <- db %>% select_if(~ all(is.na(.)) | length(unique(.))==1)
View(Solo_NA_o_Valor)
#Variables que solo tienen missing values o que tienen el mismo valor para todas las observaciones:
db_limpia <- db %>% select_if(~ !all(is.na(.)) & length(unique(.))==1)
#Variables que solo tienen missing values o que tienen el mismo valor para todas las observaciones:
db_limpia <- db %>% select_if(~ !all(is.na(.)) & length(unique(.))>1)
rm(Solo_NA_o_Valor)
View(db_limpia)
table(db$secuencia_p)
#Visualización missing después de la primera limpieza:
db_miss <- skim(db_limpia) %>%
select( skim_variable, n_missing, complete_rate) %>%
arrange(-n_missing)
View(db_miss)
?ifelse
db_miss <- db_miss %>% mutate( Not_complete_10 = ifelse(complete_rate < 0.1, 1, 0))
table(db_miss$Not_complete_10)
table(db_miss$complete_rate)
db_cleaning <- db_limpia
rm(db_limpia)
db_clean_process <- db_cleaning
rm(db_cleaning)
?inner_join
?left_join
?merge
View(db_clean_process)
db_miss_10 <- db_miss %>% filter(Not_complete_10 == 1)
db_miss_10$skim_variable
db_clean_process <- db_clean_process %>% select(-iof3ies, -y_accidentes_m, -p6585s4a2, -y_subEducativo_m, -cclasnr3,
-isaes, -cclasnr7, -iof2es, -cclasnr11, -iof6es, -p6545s2, -y_primas_m,
-y_vivienda_m, -iof3hes, -cclasnr8, -y_otros_m, -cclasnr6, -iof1es, -cclasnr4,
-iees, -p6580s2, -y_bonificaciones_m, -y_viaticos_m, -p6585s1a2, -y_auxilioAliment_m,
-y_salarySec_m, -hoursWorkActualSecondJob, -y_primaVacaciones_m, -y_primaNavidad_m,
-p7050, -p6510s2, -y_horasExtras_m, -y_especie_m, -cclasnr2, -impaes, -p7500s1, -p7500s2,
-p7500s3, -p7110, -p7120)
View(db_clean_process)
skim(db_clean_process)
table(db$p7140s1)
db_miss_117 <- db_miss %>%
filter(Not_complete_10 == 0)
db_miss_117 <- db_miss %>%
filter(Not_complete_10 == 0) %>%
arrange(-n_missing)
View(db_miss_117)
db_miss_117 <- db_miss %>%
filter(Not_complete_10 == 0) %>%
arrange(-n_missing) %>%
mutate(Not_complete_59 = ifelse(complete_rate < 0.59, 1, 0))
db_miss_117 <- db_miss %>%
filter(Not_complete_10 == 0) %>%
arrange(-n_missing) %>%
mutate(Not_complete_59 = ifelse(complete_rate < 0.59, 1, 0)) %>%
select(-Not_complete_10)
table(db_miss_117$Not_complete_59)
rm(db_miss_10)
db_miss_59 <- db_miss_117 %>% filter(Not_complete_59 == 1)
View(db_miss_59)
db_miss_59$skim_variable
variables <- c("ingtotes", "p6585s3a2", "y_subFamiliar_m", "p7140s1", "p7140s2", "p7150", "p7160", "p6750", "y_gananciaNeta_m",
"y_gananciaIndep_m", "y_gananciaIndep_m_hu", "p6585s2a2", "y_auxilioTransp_m", "p6760", "p7510s1", "p7510s2",
"p7510s3", "p7510s5", "p7510s6", "p7510s7", "y_primaServicios_m")
for (variable in variables) {
plot <- ggplot(db, aes_string(variable)) +
geom_histogram(color = "#000000", fill = "#0099F8") +
geom_vline(xintercept = median(db[[variable]], na.rm = TRUE), linetype = "dashed", color = "red") +
geom_vline(xintercept = mean(db[[variable]], na.rm = TRUE), linetype = "dashed", color = "blue") +
ggtitle(paste("Distribución", as.character(variable), sep = " ")) +
theme_classic() +
theme(plot.title = element_text(size = 18))
print(plot)
}
table(db$P6585s3a1)
table(db$p6585s3a1)
?select()
db_miss_59$skim_variable
db_clean_process <- db_clean_process %>% select(!ingtotes, p6585s3a2, y_subFamiliar_m, p7140s1, p7140s2, p7150, p7160,
p6750, y_gananciaNeta_m, y_gananciaIndep_m, y_gananciaIndep_m_hu, p6585s2a2,
y_auxilioTransp_m, p6760, p7510s1, p7510s2, p7510s3, p7510s5, p7510s6, p7510s7,
y_primaServicios_m)
db_clean_process <- db_clean_process %>% select(!(p6585s3a2, y_subFamiliar_m, p7140s1, p7140s2, p7150, p7160,
db_clean_process <- db_clean_process %>% select(~ !p6585s3a2, y_subFamiliar_m, p7140s1, p7140s2, p7150, p7160,
p6750, y_gananciaNeta_m, y_gananciaIndep_m, y_gananciaIndep_m_hu, p6585s2a2,
y_auxilioTransp_m, p6760, p7510s1, p7510s2, p7510s3, p7510s5, p7510s6, p7510s7,
y_primaServicios_m)
db_clean_process <- db_clean_process %>% select(where(~!p6585s3a2, y_subFamiliar_m, p7140s1, p7140s2, p7150, p7160,
p6750, y_gananciaNeta_m, y_gananciaIndep_m, y_gananciaIndep_m_hu, p6585s2a2,
y_auxilioTransp_m, p6760, p7510s1, p7510s2, p7510s3, p7510s5, p7510s6, p7510s7,
y_primaServicios_m))
?select
db_clean_process <- db_clean_process %>% select(!(p6585s3a2, y_subFamiliar_m, p7140s1, p7140s2, p7150, p7160,
db_clean_process <- db_clean_process %>% select(!(ingtotes,p6585s3a2, y_subFamiliar_m, p7140s1, p7140s2, p7150, p7160,
db_clean_process <- db_clean_process %>% select(!(ingtotes, p6585s3a2, y_subFamiliar_m, p7140s1, p7140s2, p7150, p7160,
###Borrar ambiente y consola:
rm(list = ls())
cat("\014")
###Cargar paquetes:
if(!require(pacman)) install.packages("pacman") ; require(pacman)
p_load(rio, # import/export data
tidyverse, # tidy-data
skimr, # summary data
visdat, # visualizing missing data
corrplot, # Correlation Plots
stargazer, # tables/output to TEX.
here) # referenciar ubicación de archivos
wd <- here()
setwd(wd)
rm(wd)
#iii) Cargar los datos:
db <- readRDS("stores/datos_GEIH.rds") %>%
as_tibble()
###Conservar indiviudos mayores de 18 años que tienen un empleo:
#iv) la condicción para conservar la observación es:  age == edad_personas , ocu === dummy_si_la_persona esta ocupada
db <- db %>%
filter(age >= 18 & ocu == 1)
db_clean_process <- db %>% select_if(~ !all(is.na(.)) & length(unique(.))>1)
#ii) Visualización missing después de la primera limpieza e identificación de las variables que tienen
#90% de missing values:
#Hay 40 variables que cumplen esta condición que se van a ser removidas:
db_miss <- skim(db_limpia) %>%
select( skim_variable, n_missing, complete_rate) %>%
arrange(-n_missing) %>%
mutate(Not_complete_10 = ifelse(complete_rate < 0.1, 1, 0))
db_clean_process <- db %>% select_if(~ !all(is.na(.)) & length(unique(.))>1)
#ii) Visualización missing después de la primera limpieza e identificación de las variables que tienen
#90% de missing values:
#Hay 40 variables que cumplen esta condición que se van a ser removidas:
db_miss <- skim(db_clean_process) %>%
select( skim_variable, n_missing, complete_rate) %>%
arrange(-n_missing) %>%
mutate(Not_complete_10 = ifelse(complete_rate < 0.1, 1, 0))
db_clean_process <- db_clean_process %>% select(-iof3ies, -y_accidentes_m, -p6585s4a2, -y_subEducativo_m, -cclasnr3,
-isaes, -cclasnr7, -iof2es, -cclasnr11, -iof6es, -p6545s2, -y_primas_m,
-y_vivienda_m, -iof3hes, -cclasnr8, -y_otros_m, -cclasnr6, -iof1es, -cclasnr4,
-iees, -p6580s2, -y_bonificaciones_m, -y_viaticos_m, -p6585s1a2, -y_auxilioAliment_m,
-y_salarySec_m, -hoursWorkActualSecondJob, -y_primaVacaciones_m, -y_primaNavidad_m,
-p7050, -p6510s2, -y_horasExtras_m, -y_especie_m, -cclasnr2, -impaes, -p7500s1, -p7500s2,
-p7500s3, -p7110, -p7120)
#iii) Visualización missing depués de la 2 limpieza e identificación variables con al menos 41% missing values:
#hay 21 variables que cumplen está condición que van a ser removidas
#la razón por que no use el 60% es porque hay 4 variables salariales que están completas el 59%
db_miss  <- db_miss %>%
filter(Not_complete_10 == 0) %>%
arrange(-n_missing) %>%
mutate(Not_complete_59 = ifelse(complete_rate < 0.59, 1, 0)) %>%
select(-Not_complete_10)
db_clean_process <- db_clean_process %>% select(!(ingtotes, p6585s3a2, y_subFamiliar_m, p7140s1, p7140s2, p7150, p7160,
db_clean_process <- db_clean_process %>% select(-c(ingtotes, p6585s3a2, y_subFamiliar_m, p7140s1, p7140s2, p7150, p7160,
p6750, y_gananciaNeta_m, y_gananciaIndep_m, y_gananciaIndep_m_hu, p6585s2a2,
y_auxilioTransp_m, p6760, p7510s1, p7510s2, p7510s3, p7510s5, p7510s6, p7510s7,
y_primaServicios_m))
skim(db_clean_process)
variables <- c(y_salary_m, y_salary_m_hu, y_ingLab_m , y_ingLab_m_ha, y_total_m, y_total_m_ha )
variables <- c("y_salary_m", "y_salary_m_hu", "y_ingLab_m", "y_ingLab_m_ha", "y_total_m", "y_total_m_ha")
variables <- c("y_salary_m", "y_salary_m_hu", "y_ingLab_m", "y_ingLab_m_ha", "y_total_m", "y_total_m_ha")
for (variable in variables) {
db <- db %>%
group_by(estrato1) %>%
mutate( variable = ifelse(is.na(variable) == T, median(variable, na.rm = T), variable)) %>%
ungroup()
}
for (variable in variables) {
plot <- ggplot(db, aes_string(variable)) +
geom_histogram(color = "#000000", fill = "#0099F8") +
geom_vline(xintercept = median(db[[variable]], na.rm = TRUE), linetype = "dashed", color = "red") +
geom_vline(xintercept = mean(db[[variable]], na.rm = TRUE), linetype = "dashed", color = "blue") +
ggtitle(paste("Distribución", as.character(variable), sep = " ")) +
theme_classic() +
theme(plot.title = element_text(size = 18))
print(plot)
}
for (variable in variables) {
db <- db %>%
group_by(estrato1) %>%
mutate( variable = ifelse(is.na(variable) == T, median(variable, na.rm = T), variable)) %>%
ungroup()
}
skim(db)
rm(variable)
for (variable in variables) {
db <- db %>%
group_by(estrato1) %>%
mutate( variable = ifelse(is.na(variable) == T, median(variable, na.rm = T), variable)) %>%
ungroup()
}
rm(variable)
#ii)Imputar las variables ingreso salarial:
for (variable in variables) {
db <- db %>%
group_by(estrato1) %>%
mutate( variable = ifelse(is.na(variable) == T, median(variable, na.rm = T), variable)) %>%
ungroup()
}
db <- db %>%
group_by(estrato1) %>%
mutate(y_salary_m_hu = ifelse(is.na(y_salary_m_hu) == T, median(y_salary_m_hu, na.rm = T), y_salary_m_hu)) %>%
ungroup()
skim(db)
db <- db %>%
group_by(estrato1) %>%
mutate(across(all_of(variables), ~ ifelse(is.na(.), median(., na.rm = TRUE), .))) %>%
ungroup()
skim(db)
?across
rm(list = ls())
#0. Preparación ----------------------------------------------------------------
# Librerías
if(!require(pacman)) install.packages("pacman") ; require(pacman)
library(pacman)
p_load(tidyverse, rvest, rebus, htmltools, rio, skimr,
visdat, margins, stargazer, here)
# Crear el directorio
wd <- here()
setwd(wd)
rm(wd)
rm(list = ls())
db <- readRDS("stores/datos_GEIH.rds") %>%
as_tibble()
db_limpia <- db %>%
filter(wap == 1 & ocu == 1)
#Eliminar variables de solo missings o que no tienen variación
db_limpia <- db_limpia %>% select_if(~ !all(is.na(.)) & length(unique(.))>1)
#Convertir variables categoricas en factores
db_limpia <- db_limpia %>%
mutate(across(c(cclasnr11, cclasnr2, cclasnr3, cclasnr4,cclasnr6, cclasnr7,
cclasnr8, college, cotPension, cuentaPropia, formal, informal,
microEmpresa, sex, estrato1, maxEducLevel, oficio, p6050, p6090,
p6100, p6210, p6210s1, p6240, p6510, p6510s2, p6545, p6545s2,
p6580, p6580s2, p6585s1, p6585s1a2, p6585s2, p6585s2a2, p6585s3,
p6585s3a2, p6585s4, p6585s4a2, p6590, p6600, p6610, p6620,
p6630s1, p6630s2, p6630s3,p6630s4, p6630s6, p6920, p7040,
p7050, p7505, regSalud, relab, sizeFirm), as.factor))
#Renombramos variables para facilitar el manejo de datos
db_limpia <- db_limpia %>% rename(parentesco_jefe = p6050, segur_social = p6090,
regim_segur_social =p6100, nivel_educ = p6210,
grad_aprob = p6210s1, actividad_prin = p6240,
tiempo_trabaj = p6426, cotiza_pens = p6920,
ingreso_laboral = p6500, horas_ocup_prin = p7040,
subempleado = p7050, tipo_contrato = p7090,
afiliado_pension = p7110, afiliado_salud = p7120,
recibe_ing_hor_ext = p6510, ingreso_hor_ext = p6510s1)
# Eliminamos las variables para las cuales más del 60% de las observaciones son faltantes
missing_percent <- colMeans(is.na(db_limpia)) * 100
db_limpia <- db_limpia[, missing_percent <= 60]
skim(db_limpia)
