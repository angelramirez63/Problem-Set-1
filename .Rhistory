is.na(db$directorio)
is.na(db)
?all
View(db_test2)
###Borrar ambiente y consola:
rm(list = ls())
cat("\014")
###Cargar paquetes:
if(!require(pacman)) install.packages("pacman") ; require(pacman)
p_load(rio, # import/export data
tidyverse, # tidy-data
skimr, # summary data
visdat, # visualizing missing data
corrplot, # Correlation Plots
stargazer, # tables/output to TEX.
here) # referenciar ubicación de archivos
###Cargar datos:
#i) here(): es una función que se usa para referenciar la ubicación de los archivos.
#para que funcionen deben abrir el problem set-1 como proyecto de R
#ii) Definir el directorio
wd <- here()
setwd(wd)
rm(wd)
#iii) Cargar los datos:
db <- readRDS("stores/datos_GEIH.rds") %>%
as_tibble()
###Conservar indiviudos mayores de 18 años que tienen un empleo:
#iv) la condicción para conservar la observación es:  age == edad_personas , ocu === dummy_si_la_persona esta ocupada
db <- db %>%
filter(age >= 18 & ocu == 1)
#Variables que solo tienen missing values o que tienen el mismo valor para todas las observaciones:
Solo_NA_o_Valor <- db %>% select_if(~ all(is.na(.)) | length(unique(.))==1)
View(Solo_NA_o_Valor)
#Variables que solo tienen missing values o que tienen el mismo valor para todas las observaciones:
db_limpia <- db %>% select_if(~ !all(is.na(.)) & length(unique(.))==1)
#Variables que solo tienen missing values o que tienen el mismo valor para todas las observaciones:
db_limpia <- db %>% select_if(~ !all(is.na(.)) & length(unique(.))>1)
rm(Solo_NA_o_Valor)
View(db_limpia)
table(db$secuencia_p)
#Visualización missing después de la primera limpieza:
db_miss <- skim(db_limpia) %>%
select( skim_variable, n_missing, complete_rate) %>%
arrange(-n_missing)
View(db_miss)
?ifelse
db_miss <- db_miss %>% mutate( Not_complete_10 = ifelse(complete_rate < 0.1, 1, 0))
table(db_miss$Not_complete_10)
table(db_miss$complete_rate)
db_cleaning <- db_limpia
rm(db_limpia)
db_clean_process <- db_cleaning
rm(db_cleaning)
?inner_join
?left_join
?merge
View(db_clean_process)
db_miss_10 <- db_miss %>% filter(Not_complete_10 == 1)
db_miss_10$skim_variable
db_clean_process <- db_clean_process %>% select(-iof3ies, -y_accidentes_m, -p6585s4a2, -y_subEducativo_m, -cclasnr3,
-isaes, -cclasnr7, -iof2es, -cclasnr11, -iof6es, -p6545s2, -y_primas_m,
-y_vivienda_m, -iof3hes, -cclasnr8, -y_otros_m, -cclasnr6, -iof1es, -cclasnr4,
-iees, -p6580s2, -y_bonificaciones_m, -y_viaticos_m, -p6585s1a2, -y_auxilioAliment_m,
-y_salarySec_m, -hoursWorkActualSecondJob, -y_primaVacaciones_m, -y_primaNavidad_m,
-p7050, -p6510s2, -y_horasExtras_m, -y_especie_m, -cclasnr2, -impaes, -p7500s1, -p7500s2,
-p7500s3, -p7110, -p7120)
View(db_clean_process)
skim(db_clean_process)
table(db$p7140s1)
db_miss_117 <- db_miss %>%
filter(Not_complete_10 == 0)
db_miss_117 <- db_miss %>%
filter(Not_complete_10 == 0) %>%
arrange(-n_missing)
View(db_miss_117)
db_miss_117 <- db_miss %>%
filter(Not_complete_10 == 0) %>%
arrange(-n_missing) %>%
mutate(Not_complete_59 = ifelse(complete_rate < 0.59, 1, 0))
db_miss_117 <- db_miss %>%
filter(Not_complete_10 == 0) %>%
arrange(-n_missing) %>%
mutate(Not_complete_59 = ifelse(complete_rate < 0.59, 1, 0)) %>%
select(-Not_complete_10)
table(db_miss_117$Not_complete_59)
rm(db_miss_10)
db_miss_59 <- db_miss_117 %>% filter(Not_complete_59 == 1)
View(db_miss_59)
db_miss_59$skim_variable
variables <- c("ingtotes", "p6585s3a2", "y_subFamiliar_m", "p7140s1", "p7140s2", "p7150", "p7160", "p6750", "y_gananciaNeta_m",
"y_gananciaIndep_m", "y_gananciaIndep_m_hu", "p6585s2a2", "y_auxilioTransp_m", "p6760", "p7510s1", "p7510s2",
"p7510s3", "p7510s5", "p7510s6", "p7510s7", "y_primaServicios_m")
for (variable in variables) {
plot <- ggplot(db, aes_string(variable)) +
geom_histogram(color = "#000000", fill = "#0099F8") +
geom_vline(xintercept = median(db[[variable]], na.rm = TRUE), linetype = "dashed", color = "red") +
geom_vline(xintercept = mean(db[[variable]], na.rm = TRUE), linetype = "dashed", color = "blue") +
ggtitle(paste("Distribución", as.character(variable), sep = " ")) +
theme_classic() +
theme(plot.title = element_text(size = 18))
print(plot)
}
table(db$P6585s3a1)
table(db$p6585s3a1)
?select()
db_miss_59$skim_variable
db_clean_process <- db_clean_process %>% select(!ingtotes, p6585s3a2, y_subFamiliar_m, p7140s1, p7140s2, p7150, p7160,
p6750, y_gananciaNeta_m, y_gananciaIndep_m, y_gananciaIndep_m_hu, p6585s2a2,
y_auxilioTransp_m, p6760, p7510s1, p7510s2, p7510s3, p7510s5, p7510s6, p7510s7,
y_primaServicios_m)
db_clean_process <- db_clean_process %>% select(!(p6585s3a2, y_subFamiliar_m, p7140s1, p7140s2, p7150, p7160,
db_clean_process <- db_clean_process %>% select(~ !p6585s3a2, y_subFamiliar_m, p7140s1, p7140s2, p7150, p7160,
p6750, y_gananciaNeta_m, y_gananciaIndep_m, y_gananciaIndep_m_hu, p6585s2a2,
y_auxilioTransp_m, p6760, p7510s1, p7510s2, p7510s3, p7510s5, p7510s6, p7510s7,
y_primaServicios_m)
db_clean_process <- db_clean_process %>% select(where(~!p6585s3a2, y_subFamiliar_m, p7140s1, p7140s2, p7150, p7160,
p6750, y_gananciaNeta_m, y_gananciaIndep_m, y_gananciaIndep_m_hu, p6585s2a2,
y_auxilioTransp_m, p6760, p7510s1, p7510s2, p7510s3, p7510s5, p7510s6, p7510s7,
y_primaServicios_m))
?select
db_clean_process <- db_clean_process %>% select(!(p6585s3a2, y_subFamiliar_m, p7140s1, p7140s2, p7150, p7160,
db_clean_process <- db_clean_process %>% select(!(ingtotes,p6585s3a2, y_subFamiliar_m, p7140s1, p7140s2, p7150, p7160,
db_clean_process <- db_clean_process %>% select(!(ingtotes, p6585s3a2, y_subFamiliar_m, p7140s1, p7140s2, p7150, p7160,
###Borrar ambiente y consola:
rm(list = ls())
cat("\014")
###Cargar paquetes:
if(!require(pacman)) install.packages("pacman") ; require(pacman)
p_load(rio, # import/export data
tidyverse, # tidy-data
skimr, # summary data
visdat, # visualizing missing data
corrplot, # Correlation Plots
stargazer, # tables/output to TEX.
here) # referenciar ubicación de archivos
wd <- here()
setwd(wd)
rm(wd)
#iii) Cargar los datos:
db <- readRDS("stores/datos_GEIH.rds") %>%
as_tibble()
###Conservar indiviudos mayores de 18 años que tienen un empleo:
#iv) la condicción para conservar la observación es:  age == edad_personas , ocu === dummy_si_la_persona esta ocupada
db <- db %>%
filter(age >= 18 & ocu == 1)
db_clean_process <- db %>% select_if(~ !all(is.na(.)) & length(unique(.))>1)
#ii) Visualización missing después de la primera limpieza e identificación de las variables que tienen
#90% de missing values:
#Hay 40 variables que cumplen esta condición que se van a ser removidas:
db_miss <- skim(db_limpia) %>%
select( skim_variable, n_missing, complete_rate) %>%
arrange(-n_missing) %>%
mutate(Not_complete_10 = ifelse(complete_rate < 0.1, 1, 0))
db_clean_process <- db %>% select_if(~ !all(is.na(.)) & length(unique(.))>1)
#ii) Visualización missing después de la primera limpieza e identificación de las variables que tienen
#90% de missing values:
#Hay 40 variables que cumplen esta condición que se van a ser removidas:
db_miss <- skim(db_clean_process) %>%
select( skim_variable, n_missing, complete_rate) %>%
arrange(-n_missing) %>%
mutate(Not_complete_10 = ifelse(complete_rate < 0.1, 1, 0))
db_clean_process <- db_clean_process %>% select(-iof3ies, -y_accidentes_m, -p6585s4a2, -y_subEducativo_m, -cclasnr3,
-isaes, -cclasnr7, -iof2es, -cclasnr11, -iof6es, -p6545s2, -y_primas_m,
-y_vivienda_m, -iof3hes, -cclasnr8, -y_otros_m, -cclasnr6, -iof1es, -cclasnr4,
-iees, -p6580s2, -y_bonificaciones_m, -y_viaticos_m, -p6585s1a2, -y_auxilioAliment_m,
-y_salarySec_m, -hoursWorkActualSecondJob, -y_primaVacaciones_m, -y_primaNavidad_m,
-p7050, -p6510s2, -y_horasExtras_m, -y_especie_m, -cclasnr2, -impaes, -p7500s1, -p7500s2,
-p7500s3, -p7110, -p7120)
#iii) Visualización missing depués de la 2 limpieza e identificación variables con al menos 41% missing values:
#hay 21 variables que cumplen está condición que van a ser removidas
#la razón por que no use el 60% es porque hay 4 variables salariales que están completas el 59%
db_miss  <- db_miss %>%
filter(Not_complete_10 == 0) %>%
arrange(-n_missing) %>%
mutate(Not_complete_59 = ifelse(complete_rate < 0.59, 1, 0)) %>%
select(-Not_complete_10)
db_clean_process <- db_clean_process %>% select(!(ingtotes, p6585s3a2, y_subFamiliar_m, p7140s1, p7140s2, p7150, p7160,
db_clean_process <- db_clean_process %>% select(-c(ingtotes, p6585s3a2, y_subFamiliar_m, p7140s1, p7140s2, p7150, p7160,
p6750, y_gananciaNeta_m, y_gananciaIndep_m, y_gananciaIndep_m_hu, p6585s2a2,
y_auxilioTransp_m, p6760, p7510s1, p7510s2, p7510s3, p7510s5, p7510s6, p7510s7,
y_primaServicios_m))
skim(db_clean_process)
variables <- c(y_salary_m, y_salary_m_hu, y_ingLab_m , y_ingLab_m_ha, y_total_m, y_total_m_ha )
variables <- c("y_salary_m", "y_salary_m_hu", "y_ingLab_m", "y_ingLab_m_ha", "y_total_m", "y_total_m_ha")
variables <- c("y_salary_m", "y_salary_m_hu", "y_ingLab_m", "y_ingLab_m_ha", "y_total_m", "y_total_m_ha")
for (variable in variables) {
db <- db %>%
group_by(estrato1) %>%
mutate( variable = ifelse(is.na(variable) == T, median(variable, na.rm = T), variable)) %>%
ungroup()
}
for (variable in variables) {
plot <- ggplot(db, aes_string(variable)) +
geom_histogram(color = "#000000", fill = "#0099F8") +
geom_vline(xintercept = median(db[[variable]], na.rm = TRUE), linetype = "dashed", color = "red") +
geom_vline(xintercept = mean(db[[variable]], na.rm = TRUE), linetype = "dashed", color = "blue") +
ggtitle(paste("Distribución", as.character(variable), sep = " ")) +
theme_classic() +
theme(plot.title = element_text(size = 18))
print(plot)
}
for (variable in variables) {
db <- db %>%
group_by(estrato1) %>%
mutate( variable = ifelse(is.na(variable) == T, median(variable, na.rm = T), variable)) %>%
ungroup()
}
skim(db)
rm(variable)
for (variable in variables) {
db <- db %>%
group_by(estrato1) %>%
mutate( variable = ifelse(is.na(variable) == T, median(variable, na.rm = T), variable)) %>%
ungroup()
}
rm(variable)
#ii)Imputar las variables ingreso salarial:
for (variable in variables) {
db <- db %>%
group_by(estrato1) %>%
mutate( variable = ifelse(is.na(variable) == T, median(variable, na.rm = T), variable)) %>%
ungroup()
}
db <- db %>%
group_by(estrato1) %>%
mutate(y_salary_m_hu = ifelse(is.na(y_salary_m_hu) == T, median(y_salary_m_hu, na.rm = T), y_salary_m_hu)) %>%
ungroup()
skim(db)
db <- db %>%
group_by(estrato1) %>%
mutate(across(all_of(variables), ~ ifelse(is.na(.), median(., na.rm = TRUE), .))) %>%
ungroup()
skim(db)
?across
rm(list = ls())
#0. Preparación ----------------------------------------------------------------
# Librerías
if(!require(pacman)) install.packages("pacman") ; require(pacman)
library(pacman)
p_load(tidyverse, rvest, rebus, htmltools, rio, skimr,
visdat, margins, stargazer, here)
# Crear el directorio
wd <- here()
setwd(wd)
rm(wd)
=======
p6510s2, p6545s2, p6580s2, p6585s1a2, p6585s2a2,
p6585s3a2, p6585s4a2, p6590s1, p6600s1, p6610, p6620,
p6630s1, p6630s2, p6630s3, p6630s4, p6630s6, p6750,
p6760, p6870, p6920, p7040, p7050, p7310, p7350,
regSalud, relab, sizeFirm), as.factor))
print(db$p6020)
View(db)
db_limpia <- db_limpia %>% rename(parentesco_jefe = p6050, segur_social = p6090,
nivel_educ = p6210, grad_aprob = p6210s1,
actividad_prin = p6240, tiempo_trabaj = p6426,
cotiza_pens = p6920, tipo_vivienda = p5090,
material_piso = p5130, material_pared = p5140,
material_techo = p5150, num_cuartos = p5210,
num_dorms = p5210s1, acceso_agua = p5240,
acceso_bano = p5290, conex_int = p5302,
tenencia_viv = p5090)
db_limpia <- db_limpia %>% rename(parentesco_jefe = p6050, segur_social = p6090,
nivel_educ = p6210, grad_aprob = p6210s1,
actividad_prin = p6240, tiempo_trabaj = p6426,
cotiza_pens = p6920, material_piso = p5130,
material_pared = p5140, material_techo = p5150, num_cuartos = p5210,
num_dorms = p5210s1, acceso_agua = p5240,
acceso_bano = p5290, conex_int = p5302,
tenencia_viv = p5090)
db_limpia <- db_limpia %>% rename(parentesco_jefe = p6050, segur_social = p6090,
nivel_educ = p6210, grad_aprob = p6210s1,
actividad_prin = p6240, tiempo_trabaj = p6426,
cotiza_pens = p6920, num_cuartos = p5210,
num_dorms = p5210s1, acceso_agua = p5240,
acceso_bano = p5290, conex_int = p5302,
tenencia_viv = p5090)
db_limpia <- db_limpia %>% rename(parentesco_jefe = p6050, segur_social = p6090,
nivel_educ = p6210, grad_aprob = p6210s1,
actividad_prin = p6240, tiempo_trabaj = p6426,
cotiza_pens = p6920, acceso_agua = p5240,
acceso_bano = p5290, conex_int = p5302,
tenencia_viv = p5090)
db_limpia <- db_limpia %>% rename(parentesco_jefe = p6050, segur_social = p6090,
nivel_educ = p6210, grad_aprob = p6210s1,
actividad_prin = p6240, tiempo_trabaj = p6426,
cotiza_pens = p6920, conex_int = p5302,
tenencia_viv = p5090)
db_limpia <- db_limpia %>% rename(parentesco_jefe = p6050, segur_social = p6090,
nivel_educ = p6210, grad_aprob = p6210s1,
actividad_prin = p6240, tiempo_trabaj = p6426,
cotiza_pens = p6920)
View(db_limpia)
db_limpia <- db_limpia %>% rename(parentesco_jefe = p6050, segur_social = p6090,
regim_segur_social =p6100, nivel_educ = p6210,
grad_aprob = p6210s1, actividad_prin = p6240,
tiempo_trabaj = p6426, cotiza_pens = p6920,
ingreso_laboral = p6500, horas_trabajadas = p6800,
horas_ocup_prin = p7040, subempleado = p7050,
tipo_contrato = p7090, afiliado_pension = p7110,
afiliado_salud = p7120, busca_trabajo = p7250)
>>>>>>> dce5732bb0e1efaf0668252595617586849edef6
rm(list = ls())
db <- readRDS("stores/datos_GEIH.rds") %>%
as_tibble()
db_limpia <- db %>%
filter(wap == 1 & ocu == 1)
#Eliminar variables de solo missings o que no tienen variación
db_limpia <- db_limpia %>% select_if(~ !all(is.na(.)) & length(unique(.))>1)
#Convertir variables categoricas en factores
db_limpia <- db_limpia %>%
mutate(across(c(cclasnr11, cclasnr2, cclasnr3, cclasnr4,cclasnr6, cclasnr7,
cclasnr8, college, cotPension, cuentaPropia, formal, informal,
microEmpresa, sex, estrato1, maxEducLevel, oficio, p6050, p6090,
p6100, p6210, p6210s1, p6240, p6510, p6510s2, p6545, p6545s2,
p6580, p6580s2, p6585s1, p6585s1a2, p6585s2, p6585s2a2, p6585s3,
p6585s3a2, p6585s4, p6585s4a2, p6590, p6600, p6610, p6620,
p6630s1, p6630s2, p6630s3,p6630s4, p6630s6, p6920, p7040,
p7050, p7505, regSalud, relab, sizeFirm), as.factor))
#Renombramos variables para facilitar el manejo de datos
db_limpia <- db_limpia %>% rename(parentesco_jefe = p6050, segur_social = p6090,
regim_segur_social =p6100, nivel_educ = p6210,
grad_aprob = p6210s1, actividad_prin = p6240,
tiempo_trabaj = p6426, cotiza_pens = p6920,
ingreso_laboral = p6500, horas_ocup_prin = p7040,
subempleado = p7050, tipo_contrato = p7090,
afiliado_pension = p7110, afiliado_salud = p7120,
recibe_ing_hor_ext = p6510, ingreso_hor_ext = p6510s1)
# Eliminamos las variables para las cuales más del 60% de las observaciones son faltantes
missing_percent <- colMeans(is.na(db_limpia)) * 100
db_limpia <- db_limpia[, missing_percent <= 60]
<<<<<<< HEAD
skim(db_limpia)
getwd()
setwd("/Users/juanestebandiaztorres/Library/Mobile Documents/com~apple~CloudDocs/9. Noveno Semestre/Big Data y Machine Learning/Modulos/Modulo 2 - Overfitting, Crossvalidation and Bootstraping/Scripts")
list.files
list.files()
rm(list = ls())
if(!require(pacman)) install.packages("pacman") ; require(pacman)
library(pacman)
p_load(tidyverse, rvest, rebus, htmltools, rio, skimr,
visdat, margins, stargazer, here, VIM, caret)
=======
View(db_limpia)
#Problem Set 1 -----------------------------------------------------------------
rm(list = ls())
#0. Preparación ----------------------------------------------------------------
# Librerías
if(!require(pacman)) install.packages("pacman") ; require(pacman)
library(pacman)
p_load(tidyverse, rvest, rebus, htmltools, rio, skimr,
visdat, margins, stargazer, here, VIM)
>>>>>>> dce5732bb0e1efaf0668252595617586849edef6
# Crear el directorio
wd <- here()
setwd(wd)
rm(wd)
<<<<<<< HEAD
=======
p_load(caret)
rm(list = ls())
db <- readRDS("stores/datos_GEIH.rds") %>%
as_tibble()
#i) la condicción para conservar la observación es:  age == edad_personas , ocu === dummy_si_la_persona esta ocupada
db_limpia <- db %>%
filter(wap == 1 & ocu == 1)
#Eliminar variables de solo missings o que no tienen variación
db_limpia <- db_limpia %>% select_if(~ !all(is.na(.)) & length(unique(.))>1)
#Convertir variables categoricas en factores
db_limpia <- db_limpia %>%
mutate(across(c(cclasnr11, cclasnr2, cclasnr3, cclasnr4,cclasnr6, cclasnr7,
cclasnr8, college, cotPension, cuentaPropia, formal, informal,
microEmpresa, sex, estrato1, maxEducLevel, oficio, p6050, p6090,
p6100, p6210, p6210s1, p6240, p6510, p6510s2, p6545, p6545s2,
p6580, p6580s2, p6585s1, p6585s1a2, p6585s2, p6585s2a2, p6585s3,
p6585s3a2, p6585s4, p6585s4a2, p6590, p6600, p6610, p6620,
p6630s1, p6630s2, p6630s3,p6630s4, p6630s6, p6920, p7040,
p7050, p7505, regSalud, relab, sizeFirm), as.factor))
#Renombramos variables para facilitar el manejo de datos
db_limpia <- db_limpia %>% rename(parentesco_jefe = p6050, segur_social = p6090,
regim_segur_social =p6100, nivel_educ = p6210,
grad_aprob = p6210s1, actividad_prin = p6240,
tiempo_trabaj = p6426, cotiza_pens = p6920,
ingreso_laboral = p6500, horas_ocup_prin = p7040,
subempleado = p7050, tipo_contrato = p7090,
afiliado_pension = p7110, afiliado_salud = p7120,
recibe_ing_hor_ext = p6510, ingreso_hor_ext = p6510s1)
# Eliminamos las variables para las cuales más del 60% de las observaciones son faltantes
missing_percent <- colMeans(is.na(db_limpia)) * 100
db_limpia <- db_limpia[, missing_percent <= 60]
library(dplyr)
library(caret)
View(db_limpia)
# Calcular la matriz de correlación, ignorando NAs
cor_matrix <- cor(db_numerica, use = "pairwise.complete.obs")
# Eliminamos variables altamente correlacionadas
db_numerica <- db_limpia %>%
select(where(is.numeric)) %>%
select(!starts_with("y_"))
# Calcular la matriz de correlación, ignorando NAs
cor_matrix <- cor(db_numerica, use = "pairwise.complete.obs")
# Revisar si hay valores NA en la matriz de correlación
if (any(is.na(cor_matrix))) {
print("¡Atención! Hay valores NA en la matriz de correlación.")
} else {
# Identificar pares de variables con correlación ≥ 0.9
highly_correlated <- which(abs(cor_matrix) >= 0.9999, arr.ind = TRUE)
highly_correlated <- highly_correlated[highly_correlated[,1] != highly_correlated[,2], ]
# Obtener nombres de variables correlacionadas
correlated_vars <- unique(rownames(highly_correlated))
# Mantener solo la primera variable de cada grupo
vars_to_keep <- unique(highly_correlated[,1])  # Índices de variables a conservar
vars_to_remove <- setdiff(correlated_vars, colnames(db_numerica)[vars_to_keep])  # Variables a eliminar
# Filtrar la base de datos
db_numerica_clean <- db_numerica[, !names(db_numerica) %in% vars_to_remove]
# Reunir con variables no numéricas
db_limpia <- bind_cols(db_numerica_clean, db_limpia %>% select(where(negate(is.numeric))))
}
rm(list = c(db_numerica, db_numerica_clean, highly_correlated, correlated_vars, missing_percent,
vars_to_keep, vars_to_remove))
rm(db_numerica, db_numerica_clean, highly_correlated, correlated_vars, missing_percent,
vars_to_keep, vars_to_remove)
>>>>>>> dce5732bb0e1efaf0668252595617586849edef6
#Problem Set 1 -----------------------------------------------------------------
rm(list = ls())
#0. Preparación ----------------------------------------------------------------
# Librerías
if(!require(pacman)) install.packages("pacman") ; require(pacman)
library(pacman)
p_load(tidyverse, rvest, rebus, htmltools, rio, skimr,
visdat, margins, stargazer, here, VIM, caret)
# Crear el directorio
wd <- here()
setwd(wd)
rm(wd)
<<<<<<< HEAD
rm(list = ls())
db <- readRDS("stores/datos_GEIH.rds") %>%
as_tibble()
db_limpia <- db %>%
filter(wap == 1 & dsi == 1)
=======
#2.1. Obtener datos ------------------------------------------------------------
# Link para el web scrapping
link_GEIH <- "https://ignaciomsarmiento.github.io/GEIH2018_sample"
datos_GEIH <-data.frame()
for(page in 1:10) {
# Obtenemos la tabla con los datos de cada página
tabla <- read_html(paste0(link_GEIH, "/pages/geih_page_", page, ".html")) %>%
html_table() %>%
as.data.frame()
# Agregamos la nueva tabla a nuestra base de datos
datos_GEIH <- bind_rows(datos_GEIH, tabla)
#Registro de progreso
print(paste("Página:", page))
}
#2.2. Limpieza de datos ---------------------------------------------------------
rm(list = ls())
db <- readRDS("stores/datos_GEIH.rds") %>%
as_tibble()
summary(is.NA(ocu))
summary(is.na(ocu))
summary(is.NA(db&ocu))
summary(is.NA(db$ocu))
summary(is.na(db$ocu))
summary(is.na(db$dsi))
summary(db$dsi)
colMeans(db$dsi)
mean(db$dsi)
mean(db$ocu)
sum(db$dsi=1)
sum(db$dsi==1)
sum(db$ocu=0)
sum(db$ocu==1)
sum(db$ocu==1)
sum(db$inac==1)
sum(db$dsi==1)
sum(db$ocu==1 & db$informal==1)
sum(db$informal==1)
summary(db$informal)
table(db$informal)
sum(db$informal==1)
>>>>>>> dce5732bb0e1efaf0668252595617586849edef6
rm(list = ls())
cat("\014")
#Cargar paquetes:
if(!require(pacman)) install.packages("pacman") ; require(pacman)
p_load(tidyverse, stargazer, here, skimr, boot)
#Definir directorio de trabajo:
wd <- here()
setwd(wd)
rm(wd)
#Cargar datos:
db <- readRDS("stores/datos_modelos.rds") %>%
as_tibble()
#1) Organizar y limpiar datos antes de estimar el modelo -----------------------
##1.1)Female variable####
db <- db %>%
mutate(female = ifelse(sex == 0, yes = 1 , no = 0)) %>%
select(-sex)
set.seed(123)
partialling_out <- function (data, index) {
db_resid <- data.frame(row.names = 1:nrow(data))
db_resid$x_resid <- lm(female ~ nivel_educ + age + sizeFirm + formal + horas_ocup_prin + oficio, data = data, subset = index )$residuals
db_resid$y_resid <- lm(ln_sal ~ nivel_educ + age + sizeFirm + formal + horas_ocup_prin + oficio, data = data, subset = index)$residuals
coef(lm( y_resid ~ x_resid, data = db_resid, subset = index))[2]
}
partialling_out(db, 1:nrow(db))
#Prueba función partialling_out:
partialling_out(db, nrow(db))
#(ii) Bootstrapping usando el paquete boot
boot(db,partialling_out, R = 100)
