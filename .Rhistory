setwd(wd)
rm(wd)
#iii) Cargar los datos:
db <- readRDS("stores/datos_GEIH.rds") %>%
as_tibble()
db <- db %>%
filter(age >= 18 & ocu == 1)
dsi, ie , formal, informal, sizeFirm , regSalud, maxEducLevel, ingtot,
db_sub1<- db %>% select( directorio, secuencia_p, orden, estrato1, sex, age, oficio, orden, totalHoursWorked,
dsi, ie , formal, informal, sizeFirm , regSalud, maxEducLevel, ingtot,
ingtotes,ingtotob, y_salary_m, y_total_m, y_ingLab_m_ha )
#i) Visualizar las variables por tipo de dato:
vis_dat(db_sub1)
#ii) Visualizar las valores que son NA:
vis_miss(db_sub1)
#Conclusión las variables que toca imputar más son ie-ingresp en especio; regSalud - regimen de salud categoríca;
#ingtotes - ingreso total imputado(valor de la compensaciones que recibe un empleado de su empleador); y_salary_m - salario mensual;
# y_total_m - ingresos totales mensuales; y_ingLab_m_ha - ingresos salariales por hora
#iii) Correlación entre las variables:
db_corr <-  db_sub1 %>%  select(which(apply(db_sub1, 2, sd) > 0))
M <- cor(db_corr)
corrplot(M)
#Los trabajadores formales tienden a trabajar en firmas más grandes
db_corr2 <- db_corr %>% select(estrato1, totalHoursWorked, y_salary_m, y_total_m, y_ingLab_m_ha, ingtot, ingtotob, maxEducLevel, sizeFirm)
db_corr2 <- db %>% select(estrato1, totalHoursWorked, y_salary_m, y_total_m, y_ingLab_m_ha, ingtot, ingtotob, maxEducLevel, sizeFirm)
db_corr <-  db_corr2 %>%  select(which(apply(db_sub1, 2, sd) > 0))
View(db_corr2)
db_cor2 <-  db_corr2 %>%  select(which(apply(db_corr2, 2, sd) > 0))
View(db_cor2)
###Borrar ambiente y consola:
rm(list = ls())
cat("\014")
###Cargar paquetes:
if(!require(pacman)) install.packages("pacman") ; require(pacman)
p_load(rio, # import/export data
tidyverse, # tidy-data
skimr, # summary data
visdat, # visualizing missing data
corrplot, # Correlation Plots
stargazer, # tables/output to TEX.
here) # referenciar ubicación de archivos
###Cargar datos:
#i) here(): es una función que se usa para referenciar la ubicación de los archivos.
#para que funcionen deben abrir el problem set-1 como proyecto de R
#ii) Definir el directorio
wd <- here()
setwd(wd)
rm(wd)
#iii) Cargar los datos:
db <- readRDS("stores/datos_GEIH.rds") %>%
as_tibble()
###Conservar indiviudos mayores de 18 años que tienen un empleo:
#iv) la condicción para conservar la observación es:  age == edad_personas , ocu === dummy_si_la_persona esta ocupada
db <- db %>%
filter(age >= 18 & ocu == 1)
db_sub1<- db %>% select( estrato1, sex, age, oficio, orden, totalHoursWorked,
formal, informal, sizeFirm , regSalud, maxEducLevel, ingtot,
ingtotes,ingtotob, y_salary_m, y_total_m, y_ingLab_m_ha )
#iii) Correlación entre las variables:
db_corr <-  db_sub1 %>%  select(which(apply(db_sub1, 2, sd) > 0))
View(db_corr)
M <- cor(db_sub1)
corrplot(M)
M <- cor(db_corr)
corrplot(M)
e1 <- db %>% filter(estrato1 == 1)
e2 <- db %>% filter(estrato1 == 2)
e3 <- db %>% filter(estrato1 == 3)
e4 <- db %>% filter(estrato1 == 4)
e5 <- db %>% filter(estrato1 == 5)
e6 <- db %>% filter(estrato1 == 6)
mean(e1$y_ingLab_m_ha, na.rm = T)
mean(e2$y_ingLab_m_ha, na.rm = T)
mean(e3$y_ingLab_m_ha, na.rm = T)
mean(e4$y_ingLab_m_ha, na.rm = T)
mean(e5$y_ingLab_m_ha, na.rm = T)
mean(e6$y_ingLab_m_ha, na.rm = T)
table(db$estrato1)
table(db$maxEducLevel)
e1 <- db %>% filter(maxEducLevel == 1)
e3 <- db %>% filter(maxEducLevel == 3)
e4 <- db %>% filter(maxEducLevel == 4)
e5 <- db %>% filter(maxEducLevel == 5)
e6 <- db %>% filter(maxEducLevel == 6)
e7 <- db %>% filter(maxEducLevel == 7)
rm(e2)
mean(e1$y_ingLab_m_ha, na.rm = T)
mean(e3$y_ingLab_m_ha, na.rm = T)
mean(e4$y_ingLab_m_ha, na.rm = T)
mean(e5$y_ingLab_m_ha, na.rm = T)
mean(e6$y_ingLab_m_ha, na.rm = T)
mean(e7$y_ingLab_m_ha, na.rm = T)
db <- db %>%
group_by(estrato1l) %>%
mutate(y_ingLab_m_ha = median(y_total_m_ha, na.rm = T)) %>%
ungroup()
db <- db %>%
group_by(estrato1) %>%
mutate(y_ingLab_m_ha = median(y_total_m_ha, na.rm = T)) %>%
ungroup()
rm(e1)
rm(e2)
rm(e3)
rm(e4)
rm(e5)
rm(e6)
rm(e6)
rm(e7)
rm(list = ls())
cat("\014")
###Cargar paquetes:
if(!require(pacman)) install.packages("pacman") ; require(pacman)
p_load(rio, # import/export data
tidyverse, # tidy-data
skimr, # summary data
visdat, # visualizing missing data
corrplot, # Correlation Plots
stargazer, # tables/output to TEX.
here) # referenciar ubicación de archivos
###Cargar datos:
#i) here(): es una función que se usa para referenciar la ubicación de los archivos.
#para que funcionen deben abrir el problem set-1 como proyecto de R
#ii) Definir el directorio
wd <- here()
setwd(wd)
rm(wd)
#iii) Cargar los datos:
db <- readRDS("stores/datos_GEIH.rds") %>%
as_tibble()
###Conservar indiviudos mayores de 18 años que tienen un empleo:
#iv) la condicción para conservar la observación es:  age == edad_personas , ocu === dummy_si_la_persona esta ocupada
db <- db %>%
filter(age >= 18 & ocu == 1)
db <-  db %>%  mutate(across(c(cclasnr11, cclasnr2, cclasnr3, cclasnr4,cclasnr6, cclasnr7,
cclasnr8, college, cotPension, cuentaPropia, formal, informal,
microEmpresa, sex, estrato1, maxEducLevel, oficio, p6050, p6090,
p6100, p6210, p6210s1, p6240, p6510, p6510s2, p6545, p6545s2,
p6580, p6580s2, p6585s1, p6585s1a2, p6585s2, p6585s2a2, p6585s3,
p6585s3a2, p6585s4, p6585s4a2, p6590, p6600, p6610, p6620,
p6630s1, p6630s2, p6630s3,p6630s4, p6630s6, p6920, p7040,
p7050, p7505, regSalud, relab, sizeFirm), as.factor))
db <- db %>%
group_by(estrato1) %>%
mutate(y_ingLab_m_ha = median(y_total_m_ha, na.rm = T)) %>%
ungroup()
skim(db$y_ingLab_m_ha)
ggplot(db, aes(y_salary_m_hu)) +
geom_histogram(color = "#000000", fill = "#0099F8") +
geom_vline(xintercept = median(db$y_ingLab_m_ha, na.rm = TRUE), linetype = "dashed", color = "red") +
geom_vline(xintercept = mean(db$y_ingLab_m_ha, na.rm = TRUE), linetype = "dashed", color = "blue") +
ggtitle(" Ingreso salarial por hora") +
theme_classic() +
theme(plot.title = element_text(size = 18))
db <- db %>%
group_by(estrato1) %>%
mutate(y_salarySec_m = median(y_salary_m_hu, na.rm = T)) %>%
ungroup()
skim(db$y_salary_m_hu)
db <- db %>%
group_by(estrato1) %>%
mutate(y_salary_m_hu = median(y_salary_m_hu, na.rm = T)) %>%
ungroup()
skim(db$y_salary_m_hu)
ggplot(db, aes(y_salary_m_hu)) +
geom_histogram(color = "#000000", fill = "#0099F8") +
geom_vline(xintercept = median(db$y_ingLab_m_ha, na.rm = TRUE), linetype = "dashed", color = "red") +
geom_vline(xintercept = mean(db$y_ingLab_m_ha, na.rm = TRUE), linetype = "dashed", color = "blue") +
ggtitle(" Ingreso salarial por hora") +
theme_classic() +
theme(plot.title = element_text(size = 18))
table(db$y_salary_m_hu)
###Borrar ambiente y consola:
rm(list = ls())
cat("\014")
###Cargar paquetes:
if(!require(pacman)) install.packages("pacman") ; require(pacman)
p_load(rio, # import/export data
tidyverse, # tidy-data
skimr, # summary data
visdat, # visualizing missing data
corrplot, # Correlation Plots
stargazer, # tables/output to TEX.
here) # referenciar ubicación de archivos
wd <- here()
setwd(wd)
rm(wd)
#iii) Cargar los datos:
db <- readRDS("stores/datos_GEIH.rds") %>%
as_tibble()
db <- db %>%
filter(age >= 18 & ocu == 1)
db <-  db %>%  mutate(across(c(cclasnr11, cclasnr2, cclasnr3, cclasnr4,cclasnr6, cclasnr7,
cclasnr8, college, cotPension, cuentaPropia, formal, informal,
microEmpresa, sex, estrato1, maxEducLevel, oficio, p6050, p6090,
p6100, p6210, p6210s1, p6240, p6510, p6510s2, p6545, p6545s2,
p6580, p6580s2, p6585s1, p6585s1a2, p6585s2, p6585s2a2, p6585s3,
p6585s3a2, p6585s4, p6585s4a2, p6590, p6600, p6610, p6620,
p6630s1, p6630s2, p6630s3,p6630s4, p6630s6, p6920, p7040,
p7050, p7505, regSalud, relab, sizeFirm), as.factor))
ggplot(db, aes(y_salary_m_hu)) +
geom_histogram(color = "#000000", fill = "#0099F8") +
geom_vline(xintercept = median(db$y_ingLab_m_ha, na.rm = TRUE), linetype = "dashed", color = "red") +
geom_vline(xintercept = mean(db$y_ingLab_m_ha, na.rm = TRUE), linetype = "dashed", color = "blue") +
ggtitle(" Ingreso salarial por hora") +
theme_classic() +
theme(plot.title = element_text(size = 18))
db <- db %>%
group_by(estrato1) %>%
mutate(y_salary_m_hu = ifelse(is.na(y_salary_m_hu) == T, median(y_salary_m_hu, na.rm = T), y_salary_m_hu)) %>%
ungroup()
skim(db$y_salary_m_hu)
ggplot(db, aes(y_salary_m_hu)) +
geom_histogram(color = "#000000", fill = "#0099F8") +
geom_vline(xintercept = median(db$y_ingLab_m_ha, na.rm = TRUE), linetype = "dashed", color = "red") +
geom_vline(xintercept = mean(db$y_ingLab_m_ha, na.rm = TRUE), linetype = "dashed", color = "blue") +
ggtitle(" Ingreso salarial por hora") +
theme_classic() +
theme(plot.title = element_text(size = 18))
skim(db$maxEducLevel)
skim(db$regSalud)
rm(list = ls())
cat("\014")
###Cargar paquetes:
if(!require(pacman)) install.packages("pacman") ; require(pacman)
p_load(rio, # import/export data
tidyverse, # tidy-data
skimr, # summary data
visdat, # visualizing missing data
corrplot, # Correlation Plots
stargazer, # tables/output to TEX.
here) # referenciar ubicación de archivos
###Cargar datos:
rm(list = ls())
cat("\014")
###Cargar paquetes:
if(!require(pacman)) install.packages("pacman") ; require(pacman)
p_load(rio, # import/export data
tidyverse, # tidy-data
skimr, # summary data
visdat, # visualizing missing data
corrplot, # Correlation Plots
stargazer, # tables/output to TEX.
here) # referenciar ubicación de archivos
###Cargar datos:
wd <- here()
setwd(wd)
rm(wd)
#iii) Cargar los datos:
db <- readRDS("stores/datos_GEIH.rds") %>%
as_tibble()
###Conservar indiviudos mayores de 18 años que tienen un empleo:
#iv) la condicción para conservar la observación es:  age == edad_personas , ocu === dummy_si_la_persona esta ocupada
db <- db %>%
filter(age >= 18 & ocu == 1)
ggplot(db, aes(y_salary_m_hu)) +
geom_histogram(color = "#000000", fill = "#0099F8") +
geom_vline(xintercept = median(db$y_ingLab_m_ha, na.rm = TRUE), linetype = "dashed", color = "red") +
geom_vline(xintercept = mean(db$y_ingLab_m_ha, na.rm = TRUE), linetype = "dashed", color = "blue") +
ggtitle(" Ingreso salarial por hora") +
theme_classic() +
theme(plot.title = element_text(size = 18))
?paste
hola <- paste("mi nombre", "es juan", sep = " ")
hola
for (variable in c(ingtot, ingtotes, ingtotob, y_salary_m, y_salary_m_hu)) {
ggplot(db, aes(y_salary_m_hu)) +
geom_histogram(color = "#000000", fill = "#0099F8") +
geom_vline(xintercept = median(db$y_ingLab_m_ha, na.rm = TRUE), linetype = "dashed", color = "red") +
geom_vline(xintercept = mean(db$y_ingLab_m_ha, na.rm = TRUE), linetype = "dashed", color = "blue") +
ggtitle(paste("Distribución", as.character(variable), sep = " ")) +
theme_classic() +
theme(plot.title = element_text(size = 18))
}
for (variable in c(ingtot, ingtotes, ingtotob, y_salary_m, y_salary_m_hu)) {
ggplot(db, aes(variable)) +
geom_histogram(color = "#000000", fill = "#0099F8") +
geom_vline(xintercept = median(db$variable, na.rm = TRUE), linetype = "dashed", color = "red") +
geom_vline(xintercept = mean(db$variable, na.rm = TRUE), linetype = "dashed", color = "blue") +
ggtitle(paste("Distribución", as.character(variable), sep = " ")) +
theme_classic() +
theme(plot.title = element_text(size = 18))
}
ggplot(db, aes(ingtot)) +
geom_histogram(color = "#000000", fill = "#0099F8") +
geom_vline(xintercept = median(db$ingtot, na.rm = TRUE), linetype = "dashed", color = "red") +
geom_vline(xintercept = mean(db$ingtot, na.rm = TRUE), linetype = "dashed", color = "blue") +
ggtitle(paste("Distribución", as.character(variable), sep = " ")) +
theme_classic() +
theme(plot.title = element_text(size = 18))
ggplot(db, aes(ingtot)) +
geom_histogram(color = "#000000", fill = "#0099F8") +
geom_vline(xintercept = median(db$ingtot, na.rm = TRUE), linetype = "dashed", color = "red") +
geom_vline(xintercept = mean(db$ingtot, na.rm = TRUE), linetype = "dashed", color = "blue") +
ggtitle(paste("Distribución", sep = " ")) +
theme_classic() +
theme(plot.title = element_text(size = 18))
variables <- c(ingtot, ingtotes, ingtotob, y_salary_m, y_salary_m_hu)
variables <- c(ingtot, ingtotes, ingtotob, y_salary_m, y_salary_m_hu)
?c()
p <- c(hola, como, estas, bombon)
drop(hola)
rm(hola)
t
variables <- c("ingtot", "ingtotes", "ingtotob","y_salary_m", "y_salary_m_hu")
variables[º]
variables[1]
for (variable in variables) {
ggplot(db, aes(variable)) +
geom_histogram(color = "#000000", fill = "#0099F8") +
geom_vline(xintercept = median(db$variable, na.rm = TRUE), linetype = "dashed", color = "red") +
geom_vline(xintercept = mean(db$variable, na.rm = TRUE), linetype = "dashed", color = "blue") +
ggtitle(paste("Distribución", as.character(variable), sep = " ")) +
theme_classic() +
theme(plot.title = element_text(size = 18))
}
warnings()
for (variable in variables) {
ggplot(db, aes(.data[variable])) +
geom_histogram(color = "#000000", fill = "#0099F8") +
geom_vline(xintercept = median(.data[variable], na.rm = TRUE), linetype = "dashed", color = "red") +
geom_vline(xintercept = mean(.data[variable], na.rm = TRUE), linetype = "dashed", color = "blue") +
ggtitle(paste("Distribución", variable , sep = " ")) +
theme_classic() +
theme(plot.title = element_text(size = 18))
}
variables <- c(db$ingtot, "ingtotes", "ingtotob","y_salary_m", "y_salary_m_hu")
rm(list = ls())
cat("\014")
###Cargar paquetes:
if(!require(pacman)) install.packages("pacman") ; require(pacman)
p_load(rio, # import/export data
tidyverse, # tidy-data
skimr, # summary data
visdat, # visualizing missing data
corrplot, # Correlation Plots
stargazer, # tables/output to TEX.
here) # referenciar ubicación de archivos
###Cargar datos:
#i) here(): es una función que se usa para referenciar la ubicación de los archivos.
#para que funcionen deben abrir el problem set-1 como proyecto de R
#ii) Definir el directorio
wd <- here()
setwd(wd)
rm(wd)
#iii) Cargar los datos:
db <- readRDS("stores/datos_GEIH.rds") %>%
as_tibble()
db <- db %>%
filter(age >= 18 & ocu == 1)
db <-  db %>%  mutate(across(c(cclasnr11, cclasnr2, cclasnr3, cclasnr4,cclasnr6, cclasnr7,
cclasnr8, college, cotPension, cuentaPropia, formal, informal,
microEmpresa, sex, estrato1, maxEducLevel, oficio, p6050, p6090,
p6100, p6210, p6210s1, p6240, p6510, p6510s2, p6545, p6545s2,
p6580, p6580s2, p6585s1, p6585s1a2, p6585s2, p6585s2a2, p6585s3,
p6585s3a2, p6585s4, p6585s4a2, p6590, p6600, p6610, p6620,
p6630s1, p6630s2, p6630s3,p6630s4, p6630s6, p6920, p7040,
p7050, p7505, regSalud, relab, sizeFirm), as.factor))
variables <- c(db$ingtot, db$ingtotes, db$ingtotob, db$y_salary_m, db$y_salary_m_hu)
variables[1]
variables
library(ggplot2)
# List of variables
variables <- c("ingtot", "ingtotes", "ingtotob", "y_salary_m", "y_salary_m_hu")
for (variable in variables) {
# Use ggplot to plot for each variable in the list
p <- ggplot(db, aes_string(x = variable)) +
geom_histogram(color = "#000000", fill = "#0099F8") +
geom_vline(aes(xintercept = median(get(variable), na.rm = TRUE)),
linetype = "dashed", color = "red") +
geom_vline(aes(xintercept = mean(get(variable), na.rm = TRUE)),
linetype = "dashed", color = "blue") +
ggtitle(paste("Distribución", variable, sep = " ")) +
theme_classic() +
theme(plot.title = element_text(size = 18))
print(p)  # Make sure the plot is shown
}
?aes_string
?get()
p <- get(ingtot)
aes_string()
?aes_string()
a <- 42
var_name <- "a"
value <- get(var_name)
print(value)  # Outputs: 42
get("ingtot")
get("ingtot")
media <- db %>% mean(get("ingtot"))
media <- db %>% mean(get("ingtot"), na.rm = T)
var1 <- db$ingtot
var1
for (variable in variables) {
plot <- ggplot(db, aes_string(variable)) +
geom_histogram(color = "#000000", fill = "#0099F8") +
geom_vline(xintercept = median(get(variable), na.rm = TRUE), linetype = "dashed", color = "red") +
geom_vline(xintercept = mean(get(variable), na.rm = TRUE), linetype = "dashed", color = "blue") +
ggtitle(paste("Distribución", as.character(variable), sep = " ")) +
theme_classic() +
theme(plot.title = element_text(size = 18))
plot
}
variables <- c("ingtot", "ingtotes", "ingtotob", "y_salary_m", "y_salary_m_hu")
rm(list = ls())
cat("\014")
###Cargar paquetes:
if(!require(pacman)) install.packages("pacman") ; require(pacman)
p_load(rio, # import/export data
tidyverse, # tidy-data
skimr, # summary data
visdat, # visualizing missing data
corrplot, # Correlation Plots
stargazer, # tables/output to TEX.
here) # referenciar ubicación de archivos
###Cargar datos:
#i) here(): es una función que se usa para referenciar la ubicación de los archivos.
#para que funcionen deben abrir el problem set-1 como proyecto de R
#ii) Definir el directorio
wd <- here()
setwd(wd)
rm(wd)
#iii) Cargar los datos:
db <- readRDS("stores/datos_GEIH.rds") %>%
as_tibble()
db <- db %>%
filter(age >= 18 & ocu == 1)
db <-  db %>%  mutate(across(c(cclasnr11, cclasnr2, cclasnr3, cclasnr4,cclasnr6, cclasnr7,
cclasnr8, college, cotPension, cuentaPropia, formal, informal,
microEmpresa, sex, estrato1, maxEducLevel, oficio, p6050, p6090,
p6100, p6210, p6210s1, p6240, p6510, p6510s2, p6545, p6545s2,
p6580, p6580s2, p6585s1, p6585s1a2, p6585s2, p6585s2a2, p6585s3,
p6585s3a2, p6585s4, p6585s4a2, p6590, p6600, p6610, p6620,
p6630s1, p6630s2, p6630s3,p6630s4, p6630s6, p6920, p7040,
p7050, p7505, regSalud, relab, sizeFirm), as.factor))
variables <- c("ingtot", "ingtotes", "ingtotob", "y_salary_m", "y_salary_m_hu")
for (variable in variables) {
plot <- ggplot(db, aes_string(variable)) +
geom_histogram(color = "#000000", fill = "#0099F8") +
geom_vline(xintercept = median(get(variable), na.rm = TRUE), linetype = "dashed", color = "red") +
geom_vline(xintercept = mean(get(variable), na.rm = TRUE), linetype = "dashed", color = "blue") +
ggtitle(paste("Distribución", as.character(variable), sep = " ")) +
theme_classic() +
theme(plot.title = element_text(size = 18))
plot
}
for (variable in variables) {
plot <- ggplot(db, aes_string(variable)) +
geom_histogram(color = "#000000", fill = "#0099F8") +
geom_vline(xintercept = median(get(variable), na.rm = TRUE), linetype = "dashed", color = "red") +
geom_vline(xintercept = mean(get(variable), na.rm = TRUE), linetype = "dashed", color = "blue") +
ggtitle(paste("Distribución", variable, sep = " ")) +
theme_classic() +
theme(plot.title = element_text(size = 18))
print(plot)  # Add this line to explicitly print the plot
}
library(ggplot2)
# List of variables
variables <- c("ingtot", "ingtotes", "ingtotob", "y_salary_m", "y_salary_m_hu")
for (variable in variables) {
# Use ggplot to plot for each variable in the list
p <- ggplot(db, aes_string(x = variable)) +
geom_histogram(color = "#000000", fill = "#0099F8") +
geom_vline(aes(xintercept = median(get(variable), na.rm = TRUE)),
linetype = "dashed", color = "red") +
geom_vline(aes(xintercept = mean(get(variable), na.rm = TRUE)),
linetype = "dashed", color = "blue") +
ggtitle(paste("Distribución", variable, sep = " ")) +
theme_classic() +
theme(plot.title = element_text(size = 18))
print(p)  # Make sure the plot is shown
}
for (variable in variables) {
plot <- ggplot(db, aes_string(variable)) +
geom_histogram(color = "#000000", fill = "#0099F8") +
geom_vline(xintercept = median(db[[variable]], na.rm = TRUE), linetype = "dashed", color = "red") +
geom_vline(xintercept = mean(db[[variable]], na.rm = TRUE), linetype = "dashed", color = "blue") +
ggtitle(paste("Distribución", as.character(variable), sep = " ")) +
theme_classic() +
theme(plot.title = element_text(size = 18))
plot
}
for (variable in variables) {
plot <- ggplot(db, aes_string(variable)) +
geom_histogram(color = "#000000", fill = "#0099F8") +
geom_vline(xintercept = median(db[[variable]], na.rm = TRUE), linetype = "dashed", color = "red") +
geom_vline(xintercept = mean(db[[variable]], na.rm = TRUE), linetype = "dashed", color = "blue") +
ggtitle(paste("Distribución", as.character(variable), sep = " ")) +
theme_classic() +
theme(plot.title = element_text(size = 18))
plot
}
for (variable in variables) {
plot <- ggplot(db, aes_string(variable)) +
geom_histogram(color = "#000000", fill = "#0099F8") +
geom_vline(xintercept = median(db[[variable]], na.rm = TRUE), linetype = "dashed", color = "red") +
geom_vline(xintercept = mean(db[[variable]], na.rm = TRUE), linetype = "dashed", color = "blue") +
ggtitle(paste("Distribución", as.character(variable), sep = " ")) +
theme_classic() +
theme(plot.title = element_text(size = 18))
print(plot)
}
db[["ingtot"]]
for (variable in c(ingtot, ingtotes,ingtotob, y_salary_m, y_salary_m_hu)) {
db <- db %>%
group_by(estrato1) %>%
mutate( variable = ifelse(is.na(variable) == T, median(variable, na.rm = T), variable)) %>%
ungroup()
}
nombre <- "juan"
nombre2 <- !!nombre
rm(nombre)
skim(db$maxEducLevel)
View(db)
