p_load(tidyverse #tidy up data
,stargazer #show regression results
,here #make commons paths to ease co working
,skimr #summary statistics
,boot #bootstrapping
,rio #export data
)
wd <- here()
setwd(wd)
rm(wd)
db <- readRDS("stores/datos_modelos.rds") %>%
filter(18< age &  age < 66) %>%
as_tibble()
#Establecer semilla:
set.seed(123)
##1.1)Female variable####
db <- db %>%
mutate(female = ifelse(sex == 0, yes = 1 , no = 0)) %>%
select(-sex)
#Función de densidad de la variable ingreso salarial por hora:
#La distribución tiene una cola izquierda pesada y una larga cola derecha
density_plot_y_ingLab_m_ha <- ggplot(db, aes(x = db$y_ingLab_m_ha)) +
geom_density(fill = "blue", alpha = .2) +
geom_line(stat = "density") +
geom_vline(xintercept = median(db$y_ingLab_m_ha, na.rm = TRUE), linetype = "dashed", color = "red") +
geom_vline(xintercept = mean(db$y_ingLab_m_ha, na.rm = TRUE), linetype = "dashed", color = "gray") +
ggtitle("Densidad ingreso salarial por horas")
density_plot_y_ingLab_m_ha
#Función de densidad de la variable ingreso salarial por hora:
#La distribución tiene una cola izquierda pesada y una larga cola derecha
density_plot_y_ingLab_m_ha <- ggplot(db, aes(x = db$ln_sal)) +
geom_density(fill = "blue", alpha = .2) +
geom_line(stat = "density") +
geom_vline(xintercept = median(db$ln_sal, na.rm = TRUE), linetype = "dashed", color = "red") +
geom_vline(xintercept = mean(db$ln_sal, na.rm = TRUE), linetype = "dashed", color = "gray") +
ggtitle("Densidad ingreso salarial por horas")
density_plot_y_ingLab_m_ha
#Problem Set 1 -----------------------------------------------------------------
rm(list = ls())
rm(list = ls())
cat("\014")
if(!require(pacman)) install.packages("pacman") ; require(pacman)
p_load(tidyverse #tidy up data
,stargazer #show regression results
,here #make commons paths to ease co working
,skimr #summary statistics
,boot #bootstrapping
,rio #export data
)
wd <- here()
setwd(wd)
rm(wd)
db <- readRDS("stores/datos_modelos.rds") %>%
filter(18< age &  age < 66) %>%
as_tibble()
rm(list = ls())
cat("\014")
#Cargar paquetes:
if(!require(pacman)) install.packages("pacman") ; require(pacman)
p_load(tidyverse #tidy up data
,stargazer #show regression results
,here #make commons paths to ease co working
,skimr #summary statistics
,boot #bootstrapping
,rio #export data
)
#Definir directorio de trabajo:
wd <- here()
setwd(wd)
rm(wd)
#Cargar datos:
db <- readRDS("stores/datos_modelos.rds") %>%
as_tibble()
table(db$age)
#Establecer semilla:
set.seed(123)
#Función de densidad de la variable ingreso salarial por hora:
#La distribución tiene una cola izquierda pesada y una larga cola derecha
density_plot_ln_sal <- ggplot(db, aes(x = db$ln_sal)) +
geom_density(fill = "blue", alpha = .2) +
geom_line(stat = "density") +
geom_vline(xintercept = median(db$ln_sal, na.rm = TRUE), linetype = "dashed", color = "red") +
geom_vline(xintercept = mean(db$ln_sal, na.rm = TRUE), linetype = "dashed", color = "gray") +
ggtitle("Densidad ingreso salarial por horas")
density_plot_ln_sal
#Agrupados por estrato:
box_plot_y_ingLab_m_ha<- ggplot(db , mapping = aes(as.factor(estrato1),  ln_sal)) +
geom_boxplot() +
ggtitle("Box plot salarial por horas por estrato")
box_plot_y_ingLab_m_ha
#Sin agrupar:
box_plot_y_ingLab_m_ha_no_group<- ggplot(db , mapping = aes(ln_sal)) +
geom_boxplot() +
ggtitle("Box plot salarial")
density_plot_sigma_rule <-  ggplot(db, aes(x = db$y_ingLab_m_ha)) +
geom_density(fill = "blue", alpha = .2) +
geom_line(stat = "density") +
geom_vline(xintercept = low, linetype = "dashed", color = "red") +
geom_vline(xintercept = up, linetype = "dashed", color = "gray") +
ggtitle("Densidad ingreso salarial por horas")
low <- mean(db$ln_sal) - 2* sd(db$ln_sal)
up <- mean(db$ln_sal) + 2* sd(db$ln_sal)
density_plot_sigma_rule <-  ggplot(db, aes(x = db$ln_sal)) +
geom_density(fill = "blue", alpha = .2) +
geom_line(stat = "density") +
geom_vline(xintercept = low, linetype = "dashed", color = "red") +
geom_vline(xintercept = up, linetype = "dashed", color = "gray") +
ggtitle("Densidad ingreso salarial por horas")
density_plot_sigma_rule
#Guardar outliers en la base de datos:
#i) Son 613 observaciones que corresponden al 6,2% de las observaciones
db_outliers <- db %>%
filter(ln_sal < low | y_ingLab_m_ha > ln_sal)
density_plot_sigma_rule
#Guardar outliers en la base de datos:
#i) Son 613 observaciones que corresponden al 6,2% de las observaciones
db_outliers <- db %>%
filter(ln_sal < low | ln_sal > up)
#ii) ingreso salarial por hora: son personas con un ingreso salarial mínimo de 23917 es decir que están en la cota superior
# de la regla de las dos desviaciones estándar
min(db_outliers$ln_sal)
max(db_outliers$ln_sal)
modelo4a <- lm(ln_sal ~ female, data = db)
stargazer(modelo4a, type = "text")
modelo4b <- lm(ln_sal ~ female + nivel_educ + age + sizeFirm + formal + horas_ocup_prin + oficio + estrato1 ,data = db)
modelo4b <- lm(ln_sal ~ female + nivel_educ + age + sizeFirm + formal + oficio + estrato1 ,data = db)
stargazer(modelo4b, type = "text", omit =  c("oficio", "nivel_educ", "age", "sizeFirm", "formal", "estrato1"))
stargazer(modelo4a, modelo4b, type = "text", omit =  c("oficio", "nivel_educ", "age", "sizeFirm", "formal", "estrato1"))
#Cargar datos:
db1 <- readRDS("stores/datos_modelos.rds") %>%
as_tibble()
db <- db %>% mutate(female_resid = lm(female ~ nivel_educ + age + sizeFirm + formal + horas_ocup_prin + oficio + estrato1 ,data = db)$residuals)
db <- db %>% mutate(female_resid = lm(female ~ nivel_educ + age + sizeFirm + formal + oficio + estrato1 ,data = db)$residuals)
#(ii) Regresión auxiliar de ln_sal en los controles: representa la parte de ln_sal que no esta explicada por los controles
db <- db %>% mutate(ln_sal_resid = lm(ln_sal ~ nivel_educ + age + sizeFirm + formal + oficio + estrato1 ,data = db)$residuals)
#(iii) regresar los residuales de la variable resultado (ii) en los residuales de la variable de interés (iii):
modelo_4b_fwl <- lm(ln_sal_resid ~ female_resid, data = db)
skim(db$estrato1)
rm(list = ls())
cat("\014")
#Cargar paquetes:
if(!require(pacman)) install.packages("pacman") ; require(pacman)
p_load(tidyverse #tidy up data
,stargazer #show regression results
,here #make commons paths to ease co working
,skimr #summary statistics
,boot #bootstrapping
,rio #export data
)
wd <- here()
setwd(wd)
rm(wd)
#Cargar datos:
db <- readRDS("stores/datos_modelos.rds") %>%
as_tibble()
#Establecer semilla:
set.seed(123)
#La distribución tiene una cola izquierda pesada y una larga cola derecha
density_plot_ln_sal <- ggplot(db, aes(x = db$ln_sal)) +
geom_density(fill = "blue", alpha = .2) +
geom_line(stat = "density") +
geom_vline(xintercept = median(db$ln_sal, na.rm = TRUE), linetype = "dashed", color = "red") +
geom_vline(xintercept = mean(db$ln_sal, na.rm = TRUE), linetype = "dashed", color = "gray") +
ggtitle("Densidad ingreso salarial por horas")
##1.3) Outliers####
#En ambos casos hay bastantes outliers. Estos podrían ser parte del procesos de generar de datos
#Teniendo en cuenta la desigualdad que hay en Colombia, pero no quiero hacerle overfitting a esos datos extremos
#Agrupados por estrato:
box_plot_y_ingLab_m_ha<- ggplot(db , mapping = aes(as.factor(estrato1),  ln_sal)) +
geom_boxplot() +
ggtitle("Box plot salarial por horas por estrato")
#Sin agrupar:
box_plot_y_ingLab_m_ha_no_group<- ggplot(db , mapping = aes(ln_sal)) +
geom_boxplot() +
ggtitle("Box plot salarial")
#Regla de la desviación estándar:
low <- mean(db$ln_sal) - 2* sd(db$ln_sal)
up <- mean(db$ln_sal) + 2* sd(db$ln_sal)
density_plot_sigma_rule <-  ggplot(db, aes(x = db$ln_sal)) +
geom_density(fill = "blue", alpha = .2) +
geom_line(stat = "density") +
geom_vline(xintercept = low, linetype = "dashed", color = "red") +
geom_vline(xintercept = up, linetype = "dashed", color = "gray") +
ggtitle("Densidad ingreso salarial por horas")
density_plot_ln_sal
density_plot_sigma_rule
density_plot_ln_sal
db_outliers <- db %>%
filter(y_ingLab_m_ha < low | y_ingLab_m_ha > up)
min(db_outliers$y_total_m_ha)
#iii) Características outliers
summary(db_outliers)
modelo4a <- lm(ln_sal ~ female, data = db)
stargazer(modelo4a, type = "text")
modelo4b <- lm(ln_sal ~ female + nivel_educ + age + sizeFirm + formal + oficio + estrato1 ,data = db)
stargazer(modelo4a, modelo4b, type = "text", omit =  c("oficio", "nivel_educ", "age", "sizeFirm", "formal", "estrato1"))
#(i) Regresión auxiliar de female en los controles: representa la parte de female que no esta explicada por los controles
db <- db %>% mutate(female_resid = lm(female ~ nivel_educ + age + sizeFirm + formal + oficio + estrato1 ,data = db)$residuals)
db$female_resid
View(db)
female_resid <- db %>% select(female_resid)
View(female_resid)
db <- db %>% mutate(female_resid = lm(female ~ nivel_educ + age + sizeFirm + formal + oficio ,data = db)$residuals)
#(ii) Regresión auxiliar de ln_sal en los controles: representa la parte de ln_sal que no esta explicada por los controles
db <- db %>% mutate(ln_sal_resid = lm(ln_sal ~ nivel_educ + age + sizeFirm + formal + oficio ,data = db)$residuals)
rm(list = ls())
cat("\014")
#Cargar paquetes:
if(!require(pacman)) install.packages("pacman") ; require(pacman)
p_load(tidyverse #tidy up data
,stargazer #show regression results
,here #make commons paths to ease co working
,skimr #summary statistics
,boot #bootstrapping
,rio #export data
)
#Definir directorio de trabajo:
wd <- here()
setwd(wd)
rm(wd)
#Cargar datos:
db <- readRDS("stores/datos_modelos.rds") %>%
as_tibble()
#Establecer semilla:
set.seed(123)
modelo4a <- lm(ln_sal ~ female, data = db)
stargazer(modelo4a, type = "text")
modelo4b <- lm(ln_sal ~ female + nivel_educ + age + sizeFirm + formal + oficio + estrato1 ,data = db)
stargazer(modelo4a, modelo4b, type = "text", omit =  c("oficio", "nivel_educ", "age", "sizeFirm", "formal", "estrato1"))
db <- db %>% mutate(female_resid = lm(female ~ nivel_educ + age + sizeFirm + formal + oficio ,data = db)$residuals)
#(ii) Regresión auxiliar de ln_sal en los controles: representa la parte de ln_sal que no esta explicada por los controles
db <- db %>% mutate(ln_sal_resid = lm(ln_sal ~ nivel_educ + age + sizeFirm + formal + oficio ,data = db)$residuals)
db$orden
db$ln_sal_resid
db$female_resid
skim(db$female)
modelo_p <- lm(female ~ nivel_educ + age + sizeFirm + formal + oficio ,data = db
2+2
modelo_p <- lm(female ~ nivel_educ + age + sizeFirm + formal + oficio ,data = db)
#1.1) Confirmar que la variable female sea categoríca:
db <- db %>% mutate(female = as.factor(female))
modelo_p <- lm(female ~ nivel_educ + age + sizeFirm + formal + oficio ,data = db)
db_original <- readRDS("stores/datos_GEIH.rds") %>%
as_tibble()
skim(db_original$sex)
?lm
db <- db %>%
mutate(female = as.numeric(female))
skim(db$female)
rm(list = ls())
cat("\014")
#Cargar paquetes:
if(!require(pacman)) install.packages("pacman") ; require(pacman)
p_load(tidyverse #tidy up data
,stargazer #show regression results
,here #make commons paths to ease co working
,skimr #summary statistics
,boot #bootstrapping
,rio #export data
)
#Definir directorio de trabajo:
wd <- here()
setwd(wd)
rm(wd)
#Cargar datos:
db <- readRDS("stores/datos_modelos.rds") %>%
as_tibble()
#Establecer semilla:
set.seed(123)
#1) Organizar y limpiar datos antes de estimar el modelo -----------------------
#1.1) Volver female una variable númerica para poder usarla como variable de respuesta usando lm()
db <- db %>%
mutate(female = as.numeric(female))
modelo4a <- lm(ln_sal ~ female, data = db)
stargazer(modelo4a, type = "text")
modelo4b <- lm(ln_sal ~ female + nivel_educ + age + sizeFirm + formal + oficio + estrato1 ,data = db)
stargazer(modelo4a, modelo4b, type = "text", omit =  c("oficio", "nivel_educ", "age", "sizeFirm", "formal", "estrato1"))
db <- db %>% mutate(female_resid = lm(female ~ nivel_educ + age + sizeFirm + formal + oficio + estrato1 ,data = db)$residuals)
#(ii) Regresión auxiliar de ln_sal en los controles: representa la parte de ln_sal que no esta explicada por los controles
db <- db %>% mutate(ln_sal_resid = lm(ln_sal ~ nivel_educ + age + sizeFirm + formal + oficio + estrato1 ,data = db)$residuals)
modelo_4b_fwl <- lm(ln_sal_resid ~ female_resid, data = db)
stargazer(modelo4b, modelo_4b_fwl, type = "text", omit = c("oficio", "nivel_educ", "age", "sizeFirm", "formal", "horas_ocup_prin", "estrato1"))
#(iv) agregar los valores predichos a la base de datos:
db$ln_sal_predicted <- predict(modelo_4b_fwl)
partialling_out <- function (data, index) {
#Función partialling-out: Esta función hace partilling-out para estimar el si hay una brecha de género en el salario por hora. La función
#------------------------ usa explica el salario por hora usando el nivel de educación, la edad, el tamaño de la firma, si es formal o informal,
# las horas que trabajo en su ocupación pricipal, la ocupación y el estrato de la persona
#Parámetros:
#----------
#db: base de datos con la información de la GEIH
#index: número de observacione de la base de datos el índice para facilitar usar esta función con el
#       paquete boot
#Return: el coeficiente de la variable female obtenido al hacer partillaing out
#-------
db_resid <- data.frame(row.names = 1:nrow(data))
db_resid$x_resid <- lm(female ~ nivel_educ + age + sizeFirm + formal + oficio + estrato1, data = data, subset = index )$residuals
db_resid$y_resid <- lm(ln_sal ~ nivel_educ + age + sizeFirm + formal + oficio + estrato1, data = data, subset = index)$residuals
coef(lm( y_resid ~ x_resid, data = db_resid, subset = index))[2]
}
partialling_out(db, 1:nrow(db))
skim(db)
average_salary_per_age_db  <- db %>%
select(age, female, ln_sal_predicted) %>%
group_by(age, female) %>%
summarise(mean_salary_per_hour = mean(ln_sal_predicted))
salary_plot_1 <-ggplot(data = average_salary_per_age_db, mapping = aes( x = age , y = mean_salary_per_hour, group = female)) +
geom_line()
salary_plot_1
table(db$age)
View(average_salary_per_age_db)
table(db$female)
rm(list = ls())
#0. Preparación ----------------------------------------------------------------
# Librerías
if(!require(pacman)) install.packages("pacman") ; require(pacman)
library(pacman)
p_load(tidyverse, rvest, rebus, htmltools, rio, skimr,
visdat, margins, stargazer, here, VIM, caret,
dplyr, gridExtra)
# Crear el directorio
wd <- here()
setwd(wd)
rm(wd)
#0) Alistar ambiente de trabajo ------------------------------------------------
rm(list = ls())
cat("\014")
#Cargar paquetes:
if(!require(pacman)) install.packages("pacman") ; require(pacman)
p_load(tidyverse #tidy up data
,stargazer #show regression results
,here #make commons paths to ease co working
,skimr #summary statistics
,boot #bootstrapping
,rio #export data
)
#Definir directorio de trabajo:
wd <- here()
setwd(wd)
rm(wd)
#Cargar datos:
db <- readRDS("stores/datos_modelos.rds") %>%
as_tibble()
#Establecer semilla:
set.seed(123)
table(db$female)
db <- db %>%
mutate(female = as.numeric(female))
table(db$female)
db <- db %>%
mutate(female = as.numeric(female)) %>%
mutate(female = ifelse(female == 2, 1, 0))
table(db$female)
modelo4a <- lm(ln_sal ~ female, data = db)
stargazer(modelo4a, type = "text")
modelo4b <- lm(ln_sal ~ female + nivel_educ + age + sizeFirm + formal + oficio + estrato1 ,data = db)
stargazer(modelo4a, modelo4b, type = "text", omit =  c("oficio", "nivel_educ", "age", "sizeFirm", "formal", "estrato1"))
db <- db %>% mutate(female_resid = lm(female ~ nivel_educ + age + sizeFirm + formal + oficio + estrato1 ,data = db)$residuals)
#(ii) Regresión auxiliar de ln_sal en los controles: representa la parte de ln_sal que no esta explicada por los controles
db <- db %>% mutate(ln_sal_resid = lm(ln_sal ~ nivel_educ + age + sizeFirm + formal + oficio + estrato1 ,data = db)$residuals)
#(iii) regresar los residuales de la variable resultado (ii) en los residuales de la variable de interés (iii):
modelo_4b_fwl <- lm(ln_sal_resid ~ female_resid, data = db)
stargazer(modelo4b, modelo_4b_fwl, type = "text", omit = c("oficio", "nivel_educ", "age", "sizeFirm", "formal", "horas_ocup_prin", "estrato1"))
db$ln_sal_predicted <- predict(modelo_4b_fwl)
partialling_out <- function (data, index) {
#Función partialling-out: Esta función hace partilling-out para estimar el si hay una brecha de género en el salario por hora. La función
#------------------------ usa explica el salario por hora usando el nivel de educación, la edad, el tamaño de la firma, si es formal o informal,
# las horas que trabajo en su ocupación pricipal, la ocupación y el estrato de la persona
#Parámetros:
#----------
#db: base de datos con la información de la GEIH
#index: número de observacione de la base de datos el índice para facilitar usar esta función con el
#       paquete boot
#Return: el coeficiente de la variable female obtenido al hacer partillaing out
#-------
db_resid <- data.frame(row.names = 1:nrow(data))
db_resid$x_resid <- lm(female ~ nivel_educ + age + sizeFirm + formal + oficio + estrato1, data = data, subset = index )$residuals
db_resid$y_resid <- lm(ln_sal ~ nivel_educ + age + sizeFirm + formal + oficio + estrato1, data = data, subset = index)$residuals
coef(lm( y_resid ~ x_resid, data = db_resid, subset = index))[2]
}
View(partialling_out)
partialling_out(db, 1:nrow(db))
average_salary_per_age_db  <- db %>%
select(age, female, ln_sal_predicted) %>%
group_by(age, female) %>%
summarise(mean_salary_per_hour = mean(ln_sal_predicted))
##4.2) Hacer un gráfico preliminar de la relación ingreso/edad por género####
salary_plot_1 <-ggplot(data = average_salary_per_age_db, mapping = aes( x = age , y = mean_salary_per_hour, group = female)) +
geom_line()
salary_plot_1
low <- mean(db$ln_sal) - 2* sd(db$ln_sal)
up <- mean(db$ln_sal) + 2* sd(db$ln_sal)
max(average_salary_per_age_db$mean_salary_per_hour)
##4.1) Colapsar base de datos a nivel de género y año####
#Nota: Se colapsa la base a nivel de género y año para la media del salario por horas
average_salary_per_age_db  <- db %>%
select(age, female, y_ingLab_m_ha) %>%
group_by(age, female) %>%
summarise(mean_salary_per_hour = mean(y_ingLab_m_ha))
##4.2) Hacer un gráfico preliminar de la relación ingreso/edad por género####
salary_plot_1 <-ggplot(data = average_salary_per_age_db, mapping = aes( x = age , y = mean_salary_per_hour, group = female)) +
geom_line()
salary_plot_1
db_outliers <- db %>%
select(y_ingLab_m_ha, age, female) %>%
filter(y_ingLab_m_ha >30000) %>%
filter( age > 60) %>%
mutate(flag = ifelse(y_ingLab_m_ha > 41253, 1, 0))
db_sin_outliers <- db %>%
filter(low < y_ingLab_m_ha & y_ingLab_m_ha < up) %>%
filter(18< age &  age < 66)
#i) Colapsar la base a nivel de edad y salario por género (otra vez)
average_salary_per_age_db  <- db_sin_outliers %>%
select(age, female, y_ingLab_m_ha) %>%
group_by(age, female) %>%
summarise(mean_salary_per_hour = mean(y_ingLab_m_ha))
salary_plot_2 <-ggplot(data = average_salary_per_age_db, mapping = aes( x = age , y = mean_salary_per_hour, group = female)) +
geom_line()
max(average_salary_per_age_db$mean_salary_per_hour)
#i) Colapsar la base a nivel de edad y salario por género (otra vez)
average_salary_per_age_db  <- db_sin_outliers %>%
select(age, female, y_ingLab_m_ha) %>%
group_by(age, female) %>%
summarise(mean_salary_per_hour = mean(y_ingLab_m_ha))
View(average_salary_per_age_db)
View(db_outliers)
View(db_sin_outliers)
db_sin_outliers <- db %>%
filter(low < y_ingLab_m_ha & y_ingLab_m_ha < up) %>%
filter(18< age | age < 66)
View(db_outliers)
rm(db_sin_outliers)
rm(modelo_4b_fwl, modelo4a, modelo4b)
rm(average_salary_per_age_db)
table(db_outliers$y_ingLab_m_ha)
db_sin_outliers <- db %>%
filter(y_ingLab_m_ha < 41470)
#i) Colapsar la base a nivel de edad y salario por género (otra vez)
average_salary_per_age_db  <- db_sin_outliers %>%
select(age, female, y_ingLab_m_ha) %>%
group_by(age, female) %>%
summarise(mean_salary_per_hour = mean(y_ingLab_m_ha))
#ii) Gráfico ingreso relación ingreso/edad por género (otra vez)
salary_plot_2 <-ggplot(data = average_salary_per_age_db, mapping = aes( x = age , y = mean_salary_per_hour, group = female)) +
geom_line()
salary_plot_2
table(db_sin_outliers$age)
db_sin_outliers <- db %>%
filter(y_ingLab_m_ha < 41470) %>%
filter(age < 66)
#i) Colapsar la base a nivel de edad y salario por género (otra vez)
average_salary_per_age_db  <- db_sin_outliers %>%
select(age, female, y_ingLab_m_ha) %>%
group_by(age, female) %>%
summarise(mean_salary_per_hour = mean(y_ingLab_m_ha))
#ii) Gráfico ingreso relación ingreso/edad por género (otra vez)
salary_plot_2 <-ggplot(data = average_salary_per_age_db, mapping = aes( x = age , y = mean_salary_per_hour, group = female)) +
geom_line()
salary_plot_2
#ii) Gráfico ingreso relación ingreso/edad por género (otra vez)
salary_plot_2 <-ggplot(data = average_salary_per_age_db, mapping = aes( x = age , y = mean_salary_per_hour, group = female)) +
geom_line() +
theme_minimal()
salary_plot_2
#ii) Gráfico ingreso relación ingreso/edad por género (otra vez)
salary_plot_2 <-ggplot(data = average_salary_per_age_db, mapping = aes( x = age , y = mean_salary_per_hour, group = female)) +
geom_smooth(method = "gam", se = FALSE) +
theme_minimal()
salary_plot_2
table(db_sin_outliers$age)
up <- mean(db$y_ingLab_m_ha) + 2* sd(db$y_ingLab_m_ha)
up
db_sin_outliers <- db %>%
filter(y_ingLab_m_ha < 24297) %>%
filter(age < 66)
#i) Colapsar la base a nivel de edad y salario por género (otra vez)
average_salary_per_age_db  <- db_sin_outliers %>%
select(age, female, y_ingLab_m_ha) %>%
group_by(age, female) %>%
summarise(mean_salary_per_hour = mean(y_ingLab_m_ha))
#ii) Gráfico ingreso relación ingreso/edad por género (otra vez)
salary_plot_2 <-ggplot(data = average_salary_per_age_db, mapping = aes( x = age , y = mean_salary_per_hour, group = female)) +
geom_smooth(method = "gam", se = FALSE) +
theme_minimal()
salary_plot_2
#ii) Gráfico ingreso relación ingreso/edad por género (otra vez)
salary_plot_2 <-ggplot(data = average_salary_per_age_db, mapping = aes( x = age , y = mean_salary_per_hour, group = female)) +
geom_smooth(method = "gam", se = FALSE) +
geom_point()
salary_plot_2
#ii) Gráfico ingreso relación ingreso/edad por género (otra vez)
salary_plot_2 <-ggplot(data = average_salary_per_age_db, mapping = aes( x = age , y = mean_salary_per_hour, group = female)) +
xlab("Edad") +
y_lab("Salario promedio por hora") +
geom_smooth(method = "gam", se = FALSE) +
theme_minimal()
#ii) Gráfico ingreso relación ingreso/edad por género (otra vez)
salary_plot_2 <-ggplot(data = average_salary_per_age_db, mapping = aes( x = age , y = mean_salary_per_hour, group = female)) +
xlab("Edad") +
#y_lab("Salario promedio por hora") +
geom_smooth(method = "gam", se = FALSE) +
theme_minimal()
#ii) Gráfico ingreso relación ingreso/edad por género (otra vez)
salary_plot_2 <-ggplot(data = average_salary_per_age_db, mapping = aes( x = age , y = mean_salary_per_hour, group = female), color=as.factor(female)) +
geom_smooth(method = "gam", se = FALSE) +
theme_minimal()
salary_plot_2
#ii) Gráfico ingreso relación ingreso/edad por género (otra vez)
salary_plot_2 <-ggplot(data = average_salary_per_age_db, mapping = aes( x = age , y = mean_salary_per_hour, group = female, color = female)) +
geom_smooth(method = "gam", se = FALSE) +
theme_minimal()
salary_plot_2
