boot(db, prueba, R = 10)
##5.1) Función que encuentra el pico####
calcular_edad_pico_mujeres <- function(data, index){
#i) Muestra boot:
data_base <- data[1:index,]
data_base <- data_base %>% mutate(across(where(is.factor), as.character))
#ii)Usar la muestra boot para predecir los valores de ingreso
data_base$ln_sal_predicted <- predict(lm(ln_sal ~ female + nivel_educ + age + sizeFirm + formal + oficio + estrato1 ,data = data_base))
#ii)Remover outliers de la base y hacer el promedio salarial por edad para las mujeres:
low <- mean(data_base$ln_sal) - 2* sd(data_base$ln_sal)
up <- mean(data_base$ln_sal) + 2* sd(data_base$ln_sal)
data_base <- data_base %>%
filter(female == 1) %>%
filter( low < ln_sal & ln_sal < up) %>%
group_by(age) %>%
summarise(mean_salary_per_hour = mean(ln_sal_predicted), contador = n())
data_base <- data_base %>%
filter(contador > 24)
#iii)Encontrar el pico de edad:
data_base <- data_base %>%
arrange(desc(mean_salary_per_hour))
#iv)Pico
pico <- as.numeric(data_base[1,2])
return(pico)
}
boot(db, calcular_edad_pico_mujeres, R = 10)
##5.1) Función que encuentra el pico####
calcular_edad_pico_mujeres <- function(data, index){
#i) Muestra boot:
data_base <- data[1:index,]
data_base <- data_base %>% mutate(across(where(is.factor), as.character))
#ii)Usar la muestra boot para predecir los valores de ingreso
data_base$ln_sal_predicted <- predict(lm(ln_sal ~ female + nivel_educ + age + sizeFirm + formal + oficio + estrato1 ,data = data_base))
#ii)Remover outliers de la base y hacer el promedio salarial por edad para las mujeres:
low <- mean(data_base$ln_sal) - 2* sd(data_base$ln_sal)
up <- mean(data_base$ln_sal) + 2* sd(data_base$ln_sal)
data_base <- data_base %>%
filter(female == 1) %>%
filter( low < ln_sal & ln_sal < up) %>%
group_by(age) %>%
summarise(mean_salary_per_hour = mean(ln_sal_predicted), contador = n())
data_base <- data_base %>%
filter(contador > 24)
#iii)Encontrar el pico de edad:
data_base <- data_base %>%
arrange(desc(mean_salary_per_hour))
#iv)Pico
pico <- as.numeric(data_base[1,2])
return(pico)
}
boot(db, calcular_edad_pico_mujeres, R = 10)
##5.1) Función que encuentra el pico####
calcular_edad_pico_mujeres <- function(data, index){
#i) Muestra boot:
data_base <- data[1:index,]
#ii)Usar la muestra boot para predecir los valores de ingreso
data_base$ln_sal_predicted <- predict(lm(ln_sal ~ female + nivel_educ + age + sizeFirm + formal + oficio + estrato1 ,data = data_base, subset = index))
#ii)Remover outliers de la base y hacer el promedio salarial por edad para las mujeres:
low <- mean(data_base$ln_sal) - 2* sd(data_base$ln_sal)
up <- mean(data_base$ln_sal) + 2* sd(data_base$ln_sal)
data_base <- data_base %>%
filter(female == 1) %>%
filter( low < ln_sal & ln_sal < up) %>%
group_by(age) %>%
summarise(mean_salary_per_hour = mean(ln_sal_predicted), contador = n())
data_base <- data_base %>%
filter(contador > 24)
#iii)Encontrar el pico de edad:
data_base <- data_base %>%
arrange(desc(mean_salary_per_hour))
#iv)Pico
pico <- as.numeric(data_base[1,2])
return(pico)
}
boot(db, calcular_edad_pico_mujeres, R = 10)
##5.1) Función que encuentra el pico####
prueba <- function(data, index){
#i) Muestra boot:
data_base <- data[1:index,]
#ii)Usar la muestra boot para predecir los valores de ingreso
data_base$ln_sal_predicted <- predict(lm(ln_sal ~ female + nivel_educ + age + sizeFirm + formal + oficio + estrato1 ,data = data, subset = index))
mean(ln_sal_predicted)
}
boot(db, prueba, R = 10)
##5.1) Función que encuentra el pico####
prueba <- function(data, index){
#i) Muestra boot:
data_base <- data[1:index,]
print(nrow(data_base))
#ii)Usar la muestra boot para predecir los valores de ingreso
#data_base$ln_sal_predicted <- predict(lm(ln_sal ~ female + nivel_educ + age + sizeFirm + formal + oficio + estrato1 ,data = data, subset = index))
#mean(ln_sal_predicted)
}
boot(db, prueba, R = 10)
##5.1) Función que encuentra el pico####
prueba <- function(data, index){
#i) Muestra boot:
data_base <- data[1:index,]
print(nrow(data_base))
print(typeof(data_base))
#ii)Usar la muestra boot para predecir los valores de ingreso
#data_base$ln_sal_predicted <- predict(lm(ln_sal ~ female + nivel_educ + age + sizeFirm + formal + oficio + estrato1 ,data = data, subset = index))
#mean(ln_sal_predicted)
}
boot(db, prueba, R = 10)
##5.1) Función que encuentra el pico####
prueba <- function(data, index){
#i) Muestra boot:
data_base <- data[1:index,]
print(nrow(data_base))
print(typeof(data_base))
print(length(data_base))
#ii)Usar la muestra boot para predecir los valores de ingreso
#data_base$ln_sal_predicted <- predict(lm(ln_sal ~ female + nivel_educ + age + sizeFirm + formal + oficio + estrato1 ,data = data, subset = index))
#mean(ln_sal_predicted)
}
boot(db, prueba, R = 10)
##5.1) Función que encuentra el pico####
prueba <- function(data, index){
#i) Muestra boot:
data_base <- data[index,]
print(nrow(data_base))
print(typeof(data_base))
print(length(data_base))
#ii)Usar la muestra boot para predecir los valores de ingreso
#data_base$ln_sal_predicted <- predict(lm(ln_sal ~ female + nivel_educ + age + sizeFirm + formal + oficio + estrato1 ,data = data, subset = index))
#mean(ln_sal_predicted)
}
boot(db, prueba, R = 10)
##5.1) Función que encuentra el pico####
calcular_edad_pico_mujeres <- function(data, index){
#i) Muestra boot:
data_base <- data[index,]
#ii)Usar la muestra boot para predecir los valores de ingreso
data_base$ln_sal_predicted <- predict(lm(ln_sal ~ female + nivel_educ + age + sizeFirm + formal + oficio + estrato1 ,data = data_base, subset = index))
#ii)Remover outliers de la base y hacer el promedio salarial por edad para las mujeres:
low <- mean(data_base$ln_sal) - 2* sd(data_base$ln_sal)
up <- mean(data_base$ln_sal) + 2* sd(data_base$ln_sal)
data_base <- data_base %>%
filter(female == 1) %>%
filter( low < ln_sal & ln_sal < up) %>%
group_by(age) %>%
summarise(mean_salary_per_hour = mean(ln_sal_predicted), contador = n())
data_base <- data_base %>%
filter(contador > 24)
#iii)Encontrar el pico de edad:
data_base <- data_base %>%
arrange(desc(mean_salary_per_hour))
#iv)Pico
pico <- as.numeric(data_base[1,2])
return(pico)
}
boot(db, calcular_edad_pico_mujeres, R = 10)
calcular_edad_pico_mujeres(db, 1:nrow(db))
##5.1) Función que encuentra el pico####
calcular_edad_pico_mujeres <- function(data, index){
#i) Muestra boot:
data_base <- data[index,]
#ii)Usar la muestra boot para predecir los valores de ingreso
data_base$ln_sal_predicted <- predict(lm(ln_sal ~ female + nivel_educ + age + sizeFirm + formal + oficio + estrato1 ,data = data_base, subset = index))
#ii)Remover outliers de la base y hacer el promedio salarial por edad para las mujeres:
low <- mean(data_base$ln_sal) - 2* sd(data_base$ln_sal)
up <- mean(data_base$ln_sal) + 2* sd(data_base$ln_sal)
data_base <- data_base %>%
filter(female == 1) %>%
filter( low < ln_sal & ln_sal < up) %>%
group_by(age) %>%
summarise(mean_salary_per_hour = mean(ln_sal_predicted), contador = n())
data_base <- data_base %>%
filter(contador > 24)
#iii)Encontrar el pico de edad:
data_base <- data_base %>%
arrange(desc(mean_salary_per_hour))
#iv)Pico
pico <- as.numeric(data_base[1,2])
print(pico)
return(pico)
}
boot(db, calcular_edad_pico_mujeres, R = 10)
pico_bootstrap_se_R1000 <- (db, calcular_edad_pico_mujeres, R = 1000)
pico_bootstrap_se_R1000 <- boot(db, calcular_edad_pico_mujeres, R = 1000)
pico_mujeres_bootstrap_se_R1000 <- pico_bootstrap_se_R1000
rm(pico_bootstrap_se_R1000)
pico_mujeres_bootstrap_se_R1000
?confit
View(pico_mujeres_bootstrap_se_R1000)
pico_mujeres_bootstrap_se_R1000$t
confint(pico_mujeres_bootstrap_se_R1000$t, level = 0.95)
#Función que encuentra el pico para los hombres:
calcular_edad_pico_hombres <- function(data, index){
#i) Muestra boot:
data_base <- data[index,]
#ii)Usar la muestra boot para predecir los valores de ingreso
data_base$ln_sal_predicted <- predict(lm(ln_sal ~ female + nivel_educ + age + sizeFirm + formal + oficio + estrato1 ,data = data_base, subset = index))
#ii)Remover outliers de la base y hacer el promedio salarial por edad para las mujeres:
low <- mean(data_base$ln_sal) - 2* sd(data_base$ln_sal)
up <- mean(data_base$ln_sal) + 2* sd(data_base$ln_sal)
data_base <- data_base %>%
filter(female == 0) %>%
filter( low < ln_sal & ln_sal < up) %>%
group_by(age) %>%
summarise(mean_salary_per_hour = mean(ln_sal_predicted), contador = n())
data_base <- data_base %>%
filter(contador > 24)
#iii)Encontrar el pico de edad:
data_base <- data_base %>%
arrange(desc(mean_salary_per_hour))
#iv)Pico
pico <- as.numeric(data_base[1,2])
return(pico)
}
View(data_base)
#Función que encuentra el pico para los hombres:
calcular_edad_pico_hombres <- function(data, index){
#i) Muestra boot:
data_base <- data[index,]
#ii)Usar la muestra boot para predecir los valores de ingreso
data_base$ln_sal_predicted <- predict(lm(ln_sal ~ female + nivel_educ + age + sizeFirm + formal + oficio + estrato1 ,data = data_base, subset = index))
#ii)Remover outliers de la base y hacer el promedio salarial por edad para las mujeres:
low <- mean(data_base$ln_sal) - 2* sd(data_base$ln_sal)
up <- mean(data_base$ln_sal) + 2* sd(data_base$ln_sal)
data_base <- data_base %>%
filter(female == 0) %>%
filter( low < ln_sal & ln_sal < up) %>%
group_by(age) %>%
summarise(mean_salary_per_hour = mean(ln_sal_predicted), contador = n())
data_base <- data_base %>%
filter(contador > 24)
#iii)Encontrar el pico de edad:
data_base <- data_base %>%
arrange(desc(mean_salary_per_hour))
#iv)Pico
pico <- as.numeric(data_base[1,1])
return(pico)
}
#Hacer bootstrapping para encontrar la incertidumbre del pico
pico_hombres_bootstrap_se_R1000 <- boot(db, calcular_edad_pico_hombres, R = 1000)
data_base[1,1]
pico_edad <- as.numeric(data_base[1,1])
#Función que encuentra el pico para los hombres:
calcular_edad_pico_hombres <- function(data, index){
#i) Muestra boot:
data_base <- data[index,]
#ii)Usar la muestra boot para predecir los valores de ingreso
data_base$ln_sal_predicted <- predict(lm(ln_sal ~ female + nivel_educ + age + sizeFirm + formal + oficio + estrato1 ,data = data_base, subset = index))
#ii)Remover outliers de la base y hacer el promedio salarial por edad para las mujeres:
low <- mean(data_base$ln_sal) - 2* sd(data_base$ln_sal)
up <- mean(data_base$ln_sal) + 2* sd(data_base$ln_sal)
data_base <- data_base %>%
filter(female == 0) %>%
filter( low < ln_sal & ln_sal < up) %>%
group_by(age) %>%
summarise(mean_salary_per_hour = mean(ln_sal_predicted), contador = n())
data_base <- data_base %>%
filter(contador > 24)
#iii)Encontrar el pico de edad:
data_base <- data_base %>%
arrange(desc(mean_salary_per_hour))
#iv)Pico
pico <- as.numeric(data_base[1,2])
return(pico)
}
#Hacer bootstrapping para encontrar la incertidumbre del pico
pico_hombres_bootstrap_se_R1000 <- boot(db, calcular_edad_pico_hombres, R = 100)
pico_hombres_bootstrap_se_R1000
#Función que encuentra el pico para los hombres:
calcular_edad_pico_hombres <- function(data, index){
#i) Muestra boot:
data_base <- data[index,]
#ii)Usar la muestra boot para predecir los valores de ingreso
data_base$ln_sal_predicted <- predict(lm(ln_sal ~ female + nivel_educ + age + sizeFirm + formal + oficio + estrato1 ,data = data_base, subset = index))
#ii)Remover outliers de la base y hacer el promedio salarial por edad para las mujeres:
low <- mean(data_base$ln_sal) - 2* sd(data_base$ln_sal)
up <- mean(data_base$ln_sal) + 2* sd(data_base$ln_sal)
data_base <- data_base %>%
filter(female == 0) %>%
filter( low < ln_sal & ln_sal < up) %>%
group_by(age) %>%
summarise(mean_salary_per_hour = mean(ln_sal_predicted), contador = n())
data_base <- data_base %>%
filter(contador > 24)
#iii)Encontrar el pico de edad:
data_base <- data_base %>%
arrange(desc(mean_salary_per_hour))
#iv)Pico
pico <- as.numeric(data_base[1,1])
return(pico)
}
#Hacer bootstrapping para encontrar la incertidumbre del pico
pico_hombres_bootstrap_se_R1000 <- boot(db, calcular_edad_pico_hombres, R = 100)
pico_hombres_bootstrap_se_R1000
View(data_base)
#Hacer bootstrapping para encontrar la incertidumbre del pico
pico_hombres_bootstrap_se_R1000 <- boot(db, calcular_edad_pico_hombres, R = 1000)
pico_hombres_bootstrap_se_R1000
confint(pico_hombres_bootstrap_se_R1000$t, level = 0.95)
##5.1) Función que encuentra el pico####
calcular_edad_pico_mujeres <- function(data, index){
#i) Muestra boot:
data_base <- data[index,]
#ii)Usar la muestra boot para predecir los valores de ingreso
data_base$ln_sal_predicted <- predict(lm(ln_sal ~ female + nivel_educ + age + sizeFirm + formal + oficio + estrato1 ,data = data_base, subset = index))
#ii)Remover outliers de la base y hacer el promedio salarial por edad para las mujeres:
low <- mean(data_base$ln_sal) - 2* sd(data_base$ln_sal)
up <- mean(data_base$ln_sal) + 2* sd(data_base$ln_sal)
data_base <- data_base %>%
filter(female == 1) %>%
filter( low < ln_sal & ln_sal < up) %>%
group_by(age) %>%
summarise(mean_salary_per_hour = mean(ln_sal_predicted), contador = n())
data_base <- data_base %>%
filter(contador > 24)
#iii)Encontrar el pico de edad:
data_base <- data_base %>%
arrange(desc(mean_salary_per_hour))
#iv)Pico
pico <- as.numeric(data_base[1,1])
return(pico)
}
##5.2)Hacer bootstrapping para encontrar la incertidumbre del pico####
pico_mujeres_bootstrap_se_R1000 <- boot(db, calcular_edad_pico_mujeres, R = 1000)
confint(pico_mujeres_bootstrap_se_R1000$t, level = 0.95)
pico_mujeres_bootstrap_se_R1000
pico_hombres_bootstrap_se_R1000
pico_hombres_bootstrap_se_R1000$t
export(pico_hombres_bootstrap_se_R1000, 'stores/pico_hombres_bootstrap_se_R1000.rds')
export(pico_mujeres_bootstrap_se_R1000, 'stores/pico_mujeres_bootstrap_se_R1000.rds')
#0) Alistar ambiente de trabajo ------------------------------------------------
rm(list = ls())
cat("\014")
#Cargar paquetes:
if(!require(pacman)) install.packages("pacman") ; require(pacman)
p_load(tidyverse #tidy up data
,stargazer #show regression results
,here #make commons paths to ease co working
,skimr #summary statistics
,boot #bootstrapping
,rio #export data
)
#Definir directorio de trabajo:
wd <- here()
setwd(wd)
rm(wd)
#Cargar datos:
db <- readRDS("stores/datos_modelos.rds") %>%
as_tibble()
#Establecer semilla:
set.seed(123)
pico_mujeres_bootstrap_se_R1000 <- readRDS("stores/pico_mujeres_bootstrap_se_R1000.rds")
pico_hombres_bootstrap_se_R1000 <- readRDS("stores/pico_hombres_bootstrap_se_R1000.rds")
pico_hombres_bootstrap_se_R1000
pico_mujeres_bootstrap_se_R1000
mean(pico_mujeres_bootstrap_se_R1000$t)
pico_hombres_bootstrap_se_R1000 <- readRDS("stores/pico_hombres_bootstrap_se_R1000.rds")
##5.2)Hacer bootstrapping para encontrar la incertidumbre del pico####
ld_pico_mujeres_bootstrap_se_R1000 <- boot(db, calcular_edad_pico_mujeres, R = 1000)
##5.2)Hacer bootstrapping para encontrar la incertidumbre del pico####
ld_pico_mujeres_bootstrap_se_R1000 <- boot(db, last_dance, R = 1000)
pico_hombres_bootstrap_se_R1000 <- readRDS("stores/pico_hombres_bootstrap_se_R1000.rds")
##5.2)Hacer bootstrapping para encontrar la incertidumbre del pico####
ld_pico_mujeres_bootstrap_se_R1000 <- boot(db, last_dance, R = 1000)
last_dance <- function(data, index){
#i) Muestra boot:
data_base <- data[index,]
#ii)Remover outliers de la base y hacer el promedio salarial por edad para las mujeres:
low <- mean(data_base$ln_sal) - 2* sd(data_base$ln_sal)
up <- mean(data_base$ln_sal) + 2* sd(data_base$ln_sal)
data_base <- data_base %>%
filter(female == 1) %>%
filter( low < ln_sal & ln_sal < up) %>%
group_by(age) %>%
summarise(mean_salary_per_hour = mean(ln_sal), contador = n())
data_base <- data_base %>%
filter(contador > 24)
#iii)Encontrar el pico de edad:
data_base <- data_base %>%
arrange(desc(mean_salary_per_hour))
#iv)Pico
pico <- as.numeric(data_base[1,1])
return(pico)
}
##5.2)Hacer bootstrapping para encontrar la incertidumbre del pico####
ld_pico_mujeres_bootstrap_se_R1000 <- boot(db, last_dance, R = 1000)
last_dance <- function(data, index){
#i) Muestra boot:
data_base <- data[index,]
#ii)Remover outliers de la base y hacer el promedio salarial por edad para las mujeres:
low <- mean(data_base$ln_sal) - 2* sd(data_base$ln_sal)
up <- mean(data_base$ln_sal) + 2* sd(data_base$ln_sal)
data_base <- data_base %>%
filter(female == 0) %>%
filter( low < ln_sal & ln_sal < up) %>%
group_by(age) %>%
summarise(mean_salary_per_hour = mean(ln_sal), contador = n())
data_base <- data_base %>%
filter(contador > 24)
#iii)Encontrar el pico de edad:
data_base <- data_base %>%
arrange(desc(mean_salary_per_hour))
#iv)Pico
pico <- as.numeric(data_base[1,1])
return(pico)
}
ld_pico_hobres_bootstrap_se_R1000 <- boot(db, last_dance, R = 1000)
ld_pico_mujeres_bootstrap_se_R1000
ld_pico_hobres_bootstrap_se_R1000
pico_hombres_bootstrap_se_R1000
pico_mujeres_bootstrap_se_R1000
rm(list = ls())
cat("\014")
#Cargar paquetes:
if(!require(pacman)) install.packages("pacman") ; require(pacman)
p_load(tidyverse #tidy up data
,stargazer #show regression results
,here #make commons paths to ease co working
,skimr #summary statistics
,boot #bootstrapping
,rio #export data
)
#Definir directorio de trabajo:
wd <- here()
setwd(wd)
rm(wd)
#Cargar datos:
db <- readRDS("stores/datos_modelos.rds") %>%
as_tibble()
#Establecer semilla:
set.seed(123)
##5.1) Función que encuentra el pico####
calcular_edad_pico_mujeres <- function(data, index){
#i) Muestra boot:
data_base <- data[index,]
#ii)Usar la muestra boot para predecir los valores de ingreso
data_base$ln_sal_predicted <- predict(lm(ln_sal ~ female + nivel_educ + age + sizeFirm + formal + oficio + estrato1 ,data = data_base, subset = index))
#ii)Remover outliers de la base y hacer el promedio salarial por edad para las mujeres:
low <- mean(data_base$ln_sal) - 2* sd(data_base$ln_sal)
up <- mean(data_base$ln_sal) + 2* sd(data_base$ln_sal)
data_base <- data_base %>%
filter(female == 1) %>%
filter( low < ln_sal & ln_sal < up) %>%
group_by(age) %>%
summarise(mean_salary_per_hour = mean(ln_sal_predicted), contador = n())
data_base <- data_base %>%
filter(contador > 24)
#iii)Encontrar el pico de edad:
data_base <- data_base %>%
arrange(desc(mean_salary_per_hour))
#iv)Pico
pico <- as.numeric(data_base[1,1])
return(pico)
}
d
#Función que encuentra el pico para los hombres:
calcular_edad_pico_hombres <- function(data, index){
#i) Muestra boot:
data_base <- data[index,]
#ii)Usar la muestra boot para predecir los valores de ingreso
data_base$ln_sal_predicted <- predict(lm(ln_sal ~ female + nivel_educ + age + sizeFirm + formal + oficio + estrato1 ,data = data_base, subset = index))
#ii)Remover outliers de la base y hacer el promedio salarial por edad para las mujeres:
low <- mean(data_base$ln_sal) - 2* sd(data_base$ln_sal)
up <- mean(data_base$ln_sal) + 2* sd(data_base$ln_sal)
data_base <- data_base %>%
filter(female == 0) %>%
filter( low < ln_sal & ln_sal < up) %>%
group_by(age) %>%
summarise(mean_salary_per_hour = mean(ln_sal_predicted), contador = n())
data_base <- data_base %>%
filter(contador > 24)
#iii)Encontrar el pico de edad:
data_base <- data_base %>%
arrange(desc(mean_salary_per_hour))
#iv)Pico
pico <- as.numeric(data_base[1,1])
return(pico)
}
##5.2)Hacer bootstrapping para encontrar la incertidumbre del pico####
pico_mujeres_bootstrap_se_R1000 <- boot(db, calcular_edad_pico_mujeres, R = 1000)
export(pico_mujeres_bootstrap_se_R1000, 'stores/pico_mujeres_bootstrap_se_R1000.rds')
pico_mujeres_bootstrap_se_R1000
pico_hombres_bootstrap_se_R1000 <- boot(db, calcular_edad_pico_hombres, R = 1000)
export(pico_hombres_bootstrap_se_R1000, 'stores/pico_hombres_bootstrap_se_R1000.rds')
db_sin_outliers <- db %>%
filter(y_ingLab_m_ha < 24297) %>%
filter(age < 62) %>%
mutate (female = as.factor(female))
#i) Colapsar la base a nivel de edad y salario por género (otra vez)
average_salary_per_age_db  <- db_sin_outliers %>%
select(age, female, ln_sal_predicted) %>%
group_by(age, female) %>%
summarise(mean_salary_per_hour = mean(ln_sal_predicted))
##3.1) Modelo####
modelo4b <- lm(ln_sal ~ female + nivel_educ + age + sizeFirm + formal + oficio + estrato1 ,data = db)
#(iv) agregar los valores predichos a la base de datos:
#Usamos los errores predichos por el modelo 4b porque es el que genera el mejor ajuste
db$ln_sal_predicted <- predict(modelo4b)
#i) Colapsar la base a nivel de edad y salario por género (otra vez)
average_salary_per_age_db  <- db_sin_outliers %>%
select(age, female, ln_sal_predicted) %>%
group_by(age, female) %>%
summarise(mean_salary_per_hour = mean(ln_sal_predicted))
db_sin_outliers <- db %>%
filter(y_ingLab_m_ha < 24297) %>%
filter(age < 62) %>%
mutate (female = as.factor(female))
#i) Colapsar la base a nivel de edad y salario por género (otra vez)
average_salary_per_age_db  <- db_sin_outliers %>%
select(age, female, ln_sal_predicted) %>%
group_by(age, female) %>%
summarise(mean_salary_per_hour = mean(ln_sal_predicted))
View(average_salary_per_age_db)
pico_mujeres_bootstrap_se_R1000
pico_hombres_bootstrap_se_R1000
